#!/usr/bin/python3

# Import from standard library
import logging
import os
# from datetime import datetime

# Import from third-party
from flask import Flask, render_template, json, request, jsonify, session, redirect, url_for

# Import local files
from authentication import verify_session as vrf

webApp = Flask(__name__)
webApp.secret_key = os.urandom(24)

# Error Handler
@webApp.errorhandler(404)
def error404(e):
    return render_template('404.html')


@webApp.errorhandler(500)
def error500(e):
    return render_template('500.html')


@webApp.route("/")
def main():
    if not vrf.verify_user():
        return redirect(url_for('login'))
    else:
        session['module'] = None
        # return render_template('index.html')
        return redirect(url_for('dashboard'))

# nmap module
@webApp.route("/nmap/overview")
def nmap():
    if not vrf.verify_user():
        return redirect(url_for('login'))
    else:
        import modules.nmap.overview as nmap
        return nmap.nmap_overview()


@webApp.route("/nmap/detail")
def nmap_detail():
    if not vrf.verify_user():
        return redirect(url_for('login'))
    else:
        import modules.nmap.detail as nmap_detail
        return nmap_detail.nmap_detail()

# NSE module
@webApp.route("/nse/overview")
def nse():
    if not vrf.verify_user():
        return redirect(url_for('login'))
    else:
        import modules.nse.overview as nse
        return nse.nse_overview()


@webApp.route("/nse/detail")
def nse_detail():
    if not vrf.verify_user():
        return redirect(url_for('login'))
    else:
        import modules.nse.detail as nse_detail
        return nse_detail.nse_detail()


# CVE module
@webApp.route("/cve/overview")
def cve():
    if not vrf.verify_user():
        return redirect(url_for('login'))
    else:
        import modules.cve_search.overview as cve
        return cve.cve_overview()


@webApp.route("/cve/detail")
def cve_detail():
    if not vrf.verify_user():
        return redirect(url_for('login'))
    else:
        import modules.cve_search.detail as cve_detail
        return cve_detail.cve_detail()


@webApp.route("/wappalyzer/overview")
def wappalyzer():
    if not vrf.verify_user():
        return redirect(url_for('login'))
    else:
        import modules.wappalyzer.overview as wappalyzer
        return wappalyzer.wappalyzer_overview()


@webApp.route("/wappalyzer/detail")
def wappalyzer_detail():
    if not vrf.verify_user():
        return redirect(url_for('login'))
    else:
        import modules.wappalyzer.detail as wappalyzer_detail
        return wappalyzer_detail.wappalyzer_detail()


# Acunetix module
@webApp.route("/acunetix/overview")
def acu():
    if not vrf.verify_user():
        return redirect(url_for('login'))
    else:
        import modules.acunetix.overview as acu
        return acu.acu_overview()


@webApp.route("/acunetix/detail/<id>")
def acu_detail(id):
    if not vrf.verify_user():
        return redirect(url_for('login'))
    else:
        import modules.acunetix.detail as acu_detail
        return acu_detail.acu_detail(id)


@webApp.route("/acunetix/detail/<id>/<vulId>")
def acu_detail_row(id, vulId):
    if not vrf.verify_user():
        return redirect(url_for('login'))
    else:
        import modules.acunetix.detail as acu_detail
        return acu_detail.acu_detail_row(id, vulId)

# Nessus module
@webApp.route("/nessus/overview")
def nessus():
    if not vrf.verify_user():
        return redirect(url_for('login'))
    else:
        import modules.nessus.overview as nessus
        return nessus.nessus_overview()


@webApp.route("/nessus/detail/<id>")
def nessus_detail(id):
    if not vrf.verify_user():
        return redirect(url_for('login'))
    else:
        import modules.nessus.detail as nessus_detail
        return nessus_detail.nessus_detail(id)

# Nikto module
@webApp.route("/nikto/overview")
def nikto():
    if not vrf.verify_user():
        return redirect(url_for('login'))
    else:
        import modules.nikto.overview as nikto
        return nikto.nikto_overview()


@webApp.route("/nikto/detail")
def nikto_detail():
    if not vrf.verify_user():
        return redirect(url_for('login'))
    else:
        import modules.nikto.detail as nikto_detail
        return nikto_detail.nikto_detail()

# Scan module


@webApp.route("/scan/overview")
def scan_overview():
    if not vrf.verify_user():
        return redirect(url_for('login'))
    else:
        import modules.scan.overview as scan
        return scan.scan_overview()


@webApp.route("/scan/detail/<id>")
def scan_detail(id):
    if not vrf.verify_user():
        return redirect(url_for('login'))
    else:
        import modules.scan.detail as scan_detail
        return scan_detail.scan_detail(id)

# Target module


@webApp.route("/targets/overview")
def targets_overview():
    if not vrf.verify_user():
        return redirect(url_for('login'))
    else:
        import modules.targets.overview as targets
        return targets.targets_overview()


@webApp.route("/targets/detail/<id>")
def targets_detail(id):
    if not vrf.verify_user():
        return redirect(url_for('login'))
    else:
        import modules.targets.detail as target_Detail
        return target_Detail.target_detail(id)

# New scan module
@webApp.route("/newscan/new")
def news_scan():
    if not vrf.verify_user():
        return redirect(url_for('login'))
    else:
        import modules.new_scan.new_scan as new_scan
        return new_scan.new_scan()


@webApp.route("/newscan/create", methods=['POST'])
def create_scan():
    if not vrf.verify_user():
        return redirect(url_for('login'))
    else:
        import modules.new_scan.create_scan as create_scan
        return create_scan.create_scan()

# Vulnerability module
@webApp.route("/vulnerability/overview")
def vulnerability_overview():
    if not vrf.verify_user():
        return redirect(url_for('login'))
    else:
        import modules.vulnerability.overview as vulnerability
        return vulnerability.vulnerability_overview()

# Start scan module
@webApp.route("/startScan", methods=['POST'])
def start_scan():
    if session.get('user') == None or session.get('verified') == False:
        return redirect(url_for('login'))
    else:
        import modules.new_scan.start_scan as start_scan
        return start_scan.start_scan()

 # Stop scan module
@webApp.route("/stopScan", methods=['POST'])
def stop_scan():
    if session.get('user') == None or session.get('verified') == False:
        return redirect(url_for('login'))
    else:
        import modules.new_scan.stop_scan as stop_scan
        return stop_scan.stop_scan()

# Delete scan module
@webApp.route("/deleteScan", methods=['POST'])
def delete_scan():
    if session.get('user') == None or session.get('verified') == False:
        return redirect(url_for('login'))
    else:
        import modules.new_scan.delete_scan as delete_scan
        return delete_scan.delete_scan()

# Authentication
@webApp.route("/login")
def login():
    from DAL import user_dal
    if user_dal.check_first_deploy():
        return redirect(url_for('first_deploy'))
    if vrf.verify_login():
        return redirect(url_for('main'))
    else:
        return render_template('login.html')


@webApp.route("/logout")
def logout():
    session.clear()
    return redirect(url_for('login'))


@webApp.route("/login", methods=['POST'])
def authen():
    if vrf.verify_login():
        return redirect(url_for('main'))
    else:
        import authentication.authen as authen
        return authen.check_login()


@webApp.route("/twofactor")
def twofactor():
    if session.get('user') == None:
        return redirect(url_for('login'))
    elif not session['user']['firstlogin']:
        return redirect(url_for('main'))
    else:
        import authentication.totp as totp
        return totp.two_factor_setup()


@webApp.route("/qrcode")
def qrcode():
    if session.get('user') == None:
        return redirect(url_for('login'))
    elif not session['user']['firstlogin']:
        return redirect(url_for('main'))
    else:
        import authentication.totp as totp
        return totp.qrcode()


@webApp.route("/verify-token", methods=['GET', 'POST'])
def verify_token():
    if session.get('user') == None:
        return redirect(url_for('login'))
    if request.method == 'GET':
        if session['user']['firstlogin'] == True:
            return redirect(url_for('twofactor'))
        elif session.get('verified') != None and session['verified'] == True:
            return redirect(url_for('main'))
        else:
            return render_template('verify-token.html')
    elif request.method == 'POST':
        import authentication.totp as totp
        return totp.verify_totp()

# Admin function
@webApp.route("/manage-user", methods=['POST', 'GET'])
def manage():
    session['module'] = None
    if not vrf.verify_admin():
        return redirect(url_for('main'))
    if request.method == 'GET':
        import user_function.admin_function as manage
        return manage.list_user()
    else:
        import user_function.admin_function as manage
        return manage.manage_user()


@webApp.route("/add-user", methods=['GET', 'POST'])
def add_user():
    session['module'] = None
    if not vrf.verify_admin():
        return redirect(url_for('main'))
    if request.method == 'GET':
        return render_template('new-user.html')
    elif request.method == 'POST':
        import user_function.admin_function as manage
        return manage.add_user()


@webApp.route("/update-user-by-admin/<id>", methods=['POST', 'GET'])
def update_user_by_admin(id):
    session['module'] = None
    if not vrf.verify_admin():
        return redirect(url_for('main'))
    if request.method == 'GET':
        from DAL import user_dal
        user = user_dal.get_user_by_id(id)
        return render_template('update-user-by-admin.html', user=user)
    else:
        import user_function.admin_function as manage
        return manage.update_user_by_admin()

# First Deploy
@webApp.route("/first-deploy", methods=['POST', 'GET'])
def first_deploy():
    from DAL import user_dal
    if not user_dal.check_first_deploy():
        return redirect(url_for('main'))
    if request.method == 'GET':
        return render_template('first-deploy.html')
    else:
        import authentication.first_deploy as fd
        return fd.first_deploy()

# User Function
@webApp.route("/profile", methods=['GET', 'POST'])
def profile():
    session['module'] = None
    if not vrf.verify_user():
        return redirect(url_for('main'))
    if request.method == 'GET':
        import user_function.user_function as user_fnc
        return user_fnc.get_user_data()
    else:
        import user_function.user_function as user_fnc
        return user_fnc.update_user()


@webApp.route("/change-password", methods=['GET', 'POST'])
def change_password():
    session['module'] = None
    if not vrf.verify_user():
        return redirect(url_for('main'))
    if request.method == 'GET':
        return render_template('change-password.html')
    else:
        import user_function.user_function as user_fnc
        return user_fnc.change_password()

# Dashboard
@webApp.route("/dashboard", methods=['GET', 'POST'])
def dashboard():
    if session.get('user') == None or session.get('verified') == False:
        return redirect(url_for('login'))
    else:
        import modules.dashboard.dashboard as dashboard
        return dashboard.dashboard()

# About
@webApp.route("/about")
def about():
    if session.get('user') == None or session.get('verified') == False:
        return redirect(url_for('login'))
    else:
        session['module'] = "about"
        return render_template('about.html')


if __name__ == "__main__":
    # webApp.run()
    webApp.run(debug=True)
