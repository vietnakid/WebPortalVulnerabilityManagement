# Import from standard library
import logging
import datetime

# Import from third-party
from flask import Flask, render_template, json, request, jsonify, session
import pytz

# Import local files
import DAO.db_connect as db_connect
from config.config import ElasticConfig

DEFAULT_SORT = "scanstat.startTime:desc"

def nessus_overview():
    try:
        es = db_connect.connect_elasticsearch()
        try:
            # Process sort and body from arguments
            search_query = request.args.get('q') or ''
            _search_query = ' '.join('*'+_+'*' for _ in search_query.split(' '))
            raw_sort = request.args.get('sort')
            sort_query = DEFAULT_SORT if raw_sort is None else DEFAULT_SORT if raw_sort == 'init_desc' else "scanstat.startTime:asc"
            query_body = {
                "_source": ["target", "vuln_stats","scanstat", "hostname", "ports", "scan_id", "scan_name", "root_scan_id"],
                "size": ElasticConfig.DEFAULT_PAGE_SIZE,
                "query": {
                    "bool": {
                        "filter": {
                            "bool": {
                                "should": [
                                    {
                                        "query_string": {
                                        "fields": ["target", "hostname", "scan_id", "scan_name"],
                                        "query": _search_query
                                        }
                                    }
                                ]
                            }
                        }
                    }
                }
            }
            # Process data
            rawData = es.search(index=ElasticConfig.NESSUS_INDEX, body=query_body, sort=sort_query)
            processed_data = processAcunetix(rawData)
        except:
            logging.exception(msg="Fail")
            return render_template('404.html')
    except:
        logging.exception(msg="Fail")
        return render_template('404.html')
    session['module'] = "nessus"
    return render_template('nessus.html', response=processed_data, search_query=search_query, sorting=sort_query)

def processAcunetix(rawData):
    try:
        UTC7 = pytz.timezone('Asia/Ho_Chi_Minh')
        processing_data = rawData['hits']
        result = {}
        result['total'] = processing_data['total']
        result['records'] = []
        for hit in processing_data['hits']:
            _source = hit['_source']
            _source["id"] = hit.get('_id')
            _source['init_time'] = str(datetime.datetime.fromtimestamp(
                    int(_source.get('scanstat').get("startTime")), tz=UTC7))
            _source['scan_time'] = int(_source.get('scanstat').get("duration"))
            result['records'].append(_source)

        return result

    except:
        logging.exception(msg="No validated jsonified data to be processed!")