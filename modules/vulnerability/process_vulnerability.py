
import logging
import datetime
import json
import pytz


def process_vulnerability(raw_data):
    try:
        UTC7 = pytz.timezone('Asia/Ho_Chi_Minh')
        processing_data = raw_data.get('hits')
        result = {}
        vulnerabilites = []
        for record in processing_data.get('hits'):
            record = record['_source']
            if record['index'] == "Nessus":
                record['link'] = "/nessus/detail/" + record['link']
            elif record['index'] == "Nikto":
                record['link'] = "/nikto/detail?id=" + record['link']
            elif record['index'] == "Acunetix":
                record['link'] = "/acunetix/detail/" + record['link']
            elif record['index'] == "CVE-Search":
                record['link'] = "/cve/detail?id=" + record['link']
            elif record['index'] == "NSE":
                record['link'] = "/nse/detail?id=" + record['link']
            record['cvss_color'] = generate_cvss_color(record['level'])
            record['time_scan'] = str(datetime.datetime.fromtimestamp(
                int(record['time_scan']), tz=UTC7))

            if record['level'] == 0.0:
                record['level'] = 'NaN'
            vulnerabilites.append(record)

        result['vulnerabilites'] = vulnerabilites
    except:
        logging.exception(msg="Error while processing Vulnerabilities!")
    return result


def generate_cvss_color(cvss):
    if cvss == 0.0:
        return "grey"
    try:
        if cvss <= 3.9:
            return "green"
        elif cvss <= 6.9:
            return "yellow"
        elif cvss < 8.9:
            return "orange"
        else:
            return "red"
    except:
        logging.exception(msg="Invalid CVSS!")
    return "grey"


def generateBody(q, paging_from, paging_size):
    body = {}
    body['from'] = (paging_from - 1) * paging_size
    body['size'] = paging_size

    body['query'] = {"bool": {"must": [], "should": []}}
    if q is None:
        # Change the gte value below to 0.1 to ignore Vulnerabilities with CVSS = 0
        body['query']['bool']['must'].append(
            {"range": {"level": {"gte": 0.0}}})
    else:
        query_fields = ["name", "hostname", "target", "scan_name"]
        list_query = q.split(" ")
        for i in list_query:
            if i != " ":
                q_string = {}
                q_string['query_string'] = {}
                q_string['query_string']['fields'] = query_fields
                q_string['query_string']['query'] = "*" + i + "*"
                body['query']['bool']['should'].append(q_string)
            else:
                continue

    return json.dumps(body)


def generateSortQuery(sort, index):
    sort_query = ""
    if index == '1':
        sort_query = "name.keyword" + ":" + sort
    elif index == '2':
        sort_query = "hostname.keyword" + ":" + sort
    elif index == '3':
        sort_query = "time_scan" + ":" + sort
    elif index == '4':
        sort_query = "scan_name.keyword" + ":" + sort
    elif index == '5':
        sort_query = "scan_type.keyword" + ":" + sort
    elif index == '6':
        sort_query = "index.keyword" + ":" + sort
    elif index == '7':
        sort_query = "level" + ":" + sort

    return sort_query
