# Import from standard library
import logging
import datetime

# Import from third-party
from flask import Flask, render_template, json, request, jsonify, render_template_string, session
from jinja2 import Environment, BaseLoader
import pytz

# Import local files
import DAO.db_connect as db_connect
from config.config import ElasticConfig

def target_detail(id):
    if id is None:
        return render_template('target-detail.html')
    else:
        try:
            es = db_connect.connect_elasticsearch()
            try:
                query_body = {
                    "size": ElasticConfig.DEFAULT_PAGE_SIZE,
                    "query": {
                        "bool": {
                            "should": [
                            {
                                "query_string": {
                                "fields": ["id"],
                                "query": id
                                }
                            }
                            ]
                        }
                    }
                    }
                rawData = es.search(index=ElasticConfig.ALL_INDEX, body=query_body)
                
                processed_data = processTargetData(rawData)

                nmapData = mergeNmapAndNSE(processed_data)
                wappalyzerData = processed_data.get('wappalyzer', [])
                niktoData = processed_data.get('nikto', [])
                acunetixData = processed_data.get('acunetix', [])
                nessusData = processed_data.get('nessus', [])
                cvesearchData = processed_data.get('cvesearch', [])
            except:
                logging.exception(msg="Fail")
                return render_template('404.html')
        except:
            logging.exception(msg="Fail")
            return render_template('404.html')
    session['module'] = "target"
    return render_template('target-detail.html', nmapData = nmapData, wappalyzerData = wappalyzerData, niktoData = niktoData, acunetixData = acunetixData, nessusData = nessusData, cvesearchData = cvesearchData)

def processTargetData(rawData):
    try:
        result = {}
        result['cvesearch'] = []
        result['acunetix'] = []

        for hit in rawData['hits']["hits"]:
            _source = hit['_source']
            _index = hit['_index']
            if _index == ElasticConfig.NMAPINDEX:
                result['nmap'] = processNmapDetail(_source)
            elif _index == ElasticConfig.NSE_INDEX:
                result['nse'] = processNseDetail(_source)
            elif _index == ElasticConfig.WAPPALYZER_INDEX:
                result['wappalyzer'] = processWappalyzerDetail(_source)
            elif _index == ElasticConfig.CVESEARCH_INDEX:
                result['cvesearch'].extend(processCVESearchDetail(_source))
            elif _index == ElasticConfig.NIKTO_INDEX:
                result['nikto'] = processNiktoDetail(_source)
            elif _index == ElasticConfig.ACUNETIX_SUMMARY_INDEX:
                result['acunetix'].extend(processAcunetixDetail(_source))
            elif _index == ElasticConfig.NESSUS_INDEX:
                result['nessus'] = processNessusDetail(_source)
            
        return result
    except:
        logging.exception(msg="No validated jsonified data to be processed!")

def processNmapDetail(_source):
    try:
        UTC7 = pytz.timezone('Asia/Ho_Chi_Minh')
        result = {}
        result['root_scan_id'] = _source.get('root_scan_id')
        result['scan_id'] = _source.get('scan_id')
        result['scan_name'] = _source.get('scan_name')
        result['target'] = _source.get('target')
        result['hostname'] = _source.get('hostname')
        result['status'] = "UP" if _source.get('status') == "hostUp" else "DOWN"
        result['init_time'] = str(datetime.datetime.fromtimestamp(int(_source['scanstat']['startTime']), tz=UTC7))
        result['scan_details'] = _source.get("scan_details")
        result['init_time'] = str(datetime.datetime.fromtimestamp(
                int(_source.get('scanstat').get("startTime")), tz=UTC7))
        result['scan_time'] = int(_source.get('scanstat').get("duration"))
        result['vuln_stats'] = _source.get('vuln_stats')

        result['openports'] = []
        openports = _source.get('openports')
        for port in openports:
            port['cpe'] = ', '.join(port['cpe'])
            port['os_product_version'] = str(port['ostype']) + '_' + str(port['product']) + '_' + str(port['version'])
            result['openports'].append(port)

        return result

    except:
        logging.exception(msg="No validated jsonified data to be processed!")

def processNseDetail(_source):
    try:
        result = _source.get('nseOutputs')

        return result

    except:
        logging.exception(msg="No validated jsonified data to be processed!")

def mergeNmapAndNSE(processed_data):
    try:
        result = processed_data.get('nmap')
        nseOutputs = processed_data.get('nse')
        openports = result.get('openports')
        result['openports'] = []
        for openport in openports:
            openport['nseOutput'] = []
            port = openport.get('port')
            for nseOutput in nseOutputs:
                nse_port = nseOutput['port']
                if nse_port == port:
                    openport['nseOutput'].append(nseOutput)

        result['openports'].append(openport)
        return result

    except:
        logging.exception(msg="No validated jsonified data to be processed!")

def processWappalyzerDetail(_source):
    try:
        result = _source.get('result')
        return result

    except:
        logging.exception(msg="No validated jsonified data to be processed!")

def processCVESearchDetail(_source):
    try:
        result = _source.get('weakness')
        return result

    except:
        logging.exception(msg="No validated jsonified data to be processed!")

def processNiktoDetail(_source):
    try:
        result = _source.get('vulnerabilities')
        return result

    except:
        logging.exception(msg="No validated jsonified data to be processed!")

def processAcunetixDetail(_source):
    try:
        result = _source.get('scan_details')

        return result

    except:
        logging.exception(msg="No validated jsonified data to be processed!")

def processNessusDetail(_source):
    try:
        result = _source.get('scan_details')
        return result

    except:
        logging.exception(msg="No validated jsonified data to be processed!")