import logging
import datetime
import json
import pytz


def processCVE(rawData):
    try:
        processing_data = rawData['hits']
        result = {}
        result['total'] = processing_data['total']
        result['records'] = []
        for hit in processing_data['hits']:
            result['records'].append(generateSource(
                hit['_source'], hit.get('_id')))

        return json.dumps(result)

    except:
        logging.exception(msg="No validated jsonified data to be processed!")


def generateSource(raw_source, id):
    source = {}
    try:
        UTC7 = pytz.timezone('Asia/Ho_Chi_Minh')
        source['id'] = id
        source['target'] = raw_source.get('target')
        source['hostname'] = raw_source.get('hostname')
        source['startTime'] = str(datetime.datetime.fromtimestamp(
            int(raw_source['scanstat']['startTime']), tz=UTC7))
        source['scan_time'] = raw_source.get('scanstat').get('duration')
        source['scan_id'] = raw_source.get('scan_id')
        source['root_scan_id'] = raw_source.get('root_scan_id')
        source['scan_name'] = raw_source.get('scan_name')
    # count cvss
        high = 0
        medium = 0
        low = 0
        if raw_source['weakness'] is not None:
            for cpe in raw_source['weakness']:
                if float(cpe['cvss']) <= 4:
                    low += 1
                elif float(cpe['cvss']) <= 7:
                    medium += 1
                else:
                    high += 1

        source['high'] = high
        source['medium'] = str(medium)
        source['low'] = str(low)
    except:
        logging.exception(msg="Generate Source failed!")
    return source


def processCveDetail(rawData):
    try:
        UTC7 = pytz.timezone('Asia/Ho_Chi_Minh')
        processing_data = rawData['_source']
        result = {}
        result['target'] = processing_data['target']
        result['hostname'] = processing_data.get('hostname')
        result['startTime'] = str(datetime.datetime.fromtimestamp(
            int(processing_data['scanstat']['startTime']), tz=UTC7))
        result['endTime'] = str(datetime.datetime.fromtimestamp(
            int(processing_data['scanstat']['endTime']), tz=UTC7))
        result['scan_time'] = processing_data.get('scanstat').get('duration')
        result['scan_id'] = processing_data.get('scan_id')
        result['root_scan_id'] = processing_data.get('root_scan_id')
        result['scan_name'] = processing_data.get('scan_name')
        result['weakness'] = processing_data['weakness']
        return result

    except:
        logging.exception(msg="No validated jsonified data to be processed!")
    return result


def generateBody(q, paging_from, paging_size):
    if q is None:
        body = {"from": (paging_from - 1) * paging_size,
                "size": paging_size,
                "query": {"match_all": {}}}
    else:
        body = {"from": (paging_from - 1) * paging_size,
                "size": paging_size,
                "query": {"bool": {"should": []}}}
        fields = ["hostname^3", "target^3"]
        list_query = q.split(" ")
        for i in list_query:
            if i != " ":
                q_string = {}
                q_string['query_string'] = {}
                q_string['query_string']['fields'] = fields
                q_string['query_string']['query'] = "*" + i + "*"

                body['query']['bool']['should'].append(q_string)
            else:
                continue
    return json.dumps(body)


def generateSortQuery(sort, index):
    sort_query = ""
    if index == '1':
        sort_query = "target.keyword" + ":" + sort
    elif index == '2':
        sort_query = "hostname.keyword" + ":" + sort
    elif index == '3':
        sort_query = "scanstat.startTime" + ":" + sort
    elif index == '4':
        sort_query = "scanstat.duration" + ":" + sort
    elif index == '5':
        sort_query = "scan_id.keyword" + ":" + sort
    elif index == '6':
        sort_query = "scan_name.keyword" + ":" + sort
    elif index == '7':
        sort_query = "vuln_stats.high" + ":" + sort

    return sort_query
