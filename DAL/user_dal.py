import logging
from datetime import datetime

import DAO.db_connect as db_connect
from config.config import ElasticConfig
import base64
import os
from hash_function import hash_pass

def get_user_by_id(userid):
    try:
        es = db_connect.connect_elasticsearch()
        try:
            raw_data = es.get(index=ElasticConfig.USERS_INDEX, id=userid)
            if raw_data['found']:
                result = raw_data['_source']
                result['id'] = raw_data['_id']
                return result
            else:
                return []
        except:
            logging.exception(msg="Fail")
    except:
        logging.exception(msg="Fail")

def check_username_exist(username):
    try:
        es = db_connect.connect_elasticsearch()
        try:
            body = {
                "query": {
                    "bool": {
                        "must": [
                            {"match": { "username": username }}
                        ]
                    }
                }
            }
            raw_data = es.search(index=ElasticConfig.USERS_INDEX, body=body)
            if raw_data['hits']['total'] != 0:
                return True
            return False
        except:
            logging.exception(msg="Fail")
    except:
        logging.exception(msg="Fail")

def delete_user(userid):
    try:
        es = db_connect.connect_elasticsearch()
        try:
            raw_data = es.delete(index=ElasticConfig.USERS_INDEX, id=userid)
            if raw_data['result'] == 'deleted':
                return True
            return False
        except es.exceptions.NotFoundError:
            return False
        except:
            logging.exception(msg="Fail")
    except:
        logging.exception(msg="Fail")

def enable_user(userid):
    try:
        es = db_connect.connect_elasticsearch()
        try:
            body = {
                "script" : "ctx._source.is_disable = false"
            }
            raw_data = es.update(index=ElasticConfig.USERS_INDEX, body=body, id=userid)
            if raw_data['result'] == 'updated':
                return True
            return False
        except:
            logging.exception(msg="Fail")
    except:
        logging.exception(msg="Fail")

def disable_user(userid):
    try:
        es = db_connect.connect_elasticsearch()
        try:
            body = {
                "script" : "ctx._source.is_disable = true"
            }
            raw_data = es.update(index=ElasticConfig.USERS_INDEX, body=body, id=userid)
            if raw_data['result'] == 'updated':
                return True
            return False
        except:
            logging.exception(msg="Fail")
    except:
        logging.exception(msg="Fail")

#Change status firstlogin
def change_status_first_login(userid, status):
    try:
        es = db_connect.connect_elasticsearch()
        try:
            if status:
                status = 'true'
            else:
                status = 'false'
            body = {
                "script" : "ctx._source.firstlogin = {}".format(status)
            }
            raw_data = es.update(index=ElasticConfig.USERS_INDEX, body=body, id=userid)
            if raw_data['result'] == 'updated':
                return True
            return False
        except:
            logging.exception(msg="Fail")
    except:
        logging.exception(msg="Fail")

def get_list_user(paging_size, paging_from):
    try:
        es = db_connect.connect_elasticsearch()
        try:
            sort_query = "timestamp_created:asc"
            query_body = {
                "from": (paging_from - 1) * paging_size,
                "size": paging_size
            }
            raw_data = es.search(index=ElasticConfig.USERS_INDEX, size=paging_size, body=query_body, sort=sort_query)
            return raw_data
        except:
            logging.exception(msg="Fail")
    except:
        logging.exception(msg="Fail")

def add_user(username, password, fullname, role):
    try:
        es = db_connect.connect_elasticsearch()
        try:
            otp_secret = base64.b32encode(os.urandom(15)).decode('utf-8')
            _password = hash_pass.make_hash(password)
            timestamp_created = datetime.timestamp(datetime.now())
            body = {
                "username": username,
                "password": _password,
                "firstlogin": True,
                "fullname": fullname,
                "role": role,
                "otp_secret": otp_secret,
                "is_disable": False,
                "failure": 0,
                "timestamp_created": timestamp_created
            }
            raw_data = es.index(index=ElasticConfig.USERS_INDEX, body=body)
            if raw_data['result'] == 'created':
                return True
            return False
        except:
            logging.exception(msg="Fail")
    except:
        logging.exception(msg="Fail")

def update_user_by_admin(userid, new_password, fullname, role):
    try:
        if new_password:
            hashed_password = hash_pass.make_hash(new_password)
            script = "ctx._source.password = '{}'; ctx._source.fullname = '{}'; ctx._source.role = {};".format(hashed_password, fullname, role)
        else:
            script = "ctx._source.fullname = '{}'; ctx._source.role = {};".format(fullname, role)
        es = db_connect.connect_elasticsearch()
        try:
            body = {
                "script": script
            }
            raw_data = es.update(index=ElasticConfig.USERS_INDEX, body=body, id=userid)
            if raw_data['result'] == 'updated':
                return True
            return False
        except:
            logging.exception(msg="Fail")
    except:
        logging.exception(msg="Fail")

def update_user(userid, fullname):
    try:
        es = db_connect.connect_elasticsearch()
        try:
            script = "ctx._source.fullname = '{}'".format(fullname)
            body = {
                "script": script
            }
            raw_data = es.update(index=ElasticConfig.USERS_INDEX, body=body, id=userid)
            if raw_data['result'] == 'updated':
                return True
            return False
        except:
            logging.exception(msg="Fail")
    except:
        logging.exception(msg="Fail")

def check_current_password(userid, password):
    try:
        es = db_connect.connect_elasticsearch()
        try:
            raw_data = es.get(index=ElasticConfig.USERS_INDEX, id=userid)
            hashed_pass = hash_pass.make_hash(password)
            if raw_data['found'] and raw_data['_source']['password'] == hashed_pass:
                return True
            return False
        except:
            logging.exception(msg="Fail")
    except:
        logging.exception(msg="Fail")

def change_password(userid, new_password):
    try:
        es = db_connect.connect_elasticsearch()
        try:
            script = "ctx._source.password = '{}'".format(hash_pass.make_hash(new_password))
            body = {
                "script": script
            }
            raw_data = es.update(index=ElasticConfig.USERS_INDEX, body=body, id=userid)
            if raw_data['result'] == 'updated':
                return True
            return False
        except:
            logging.exception(msg="Fail")
    except:
        logging.exception(msg="Fail")

def check_disabled_user_by_id(userid):
    try:
        es = db_connect.connect_elasticsearch()
        try:
            raw_data = es.get(index=ElasticConfig.USERS_INDEX, id=userid)
            if raw_data['found']:
                is_disable = raw_data['_source']['is_disable']
                return is_disable
            return False
        except:
            logging.exception(msg="Fail")
    except:
        logging.exception(msg="Fail")

def increase_number_of_failure(username, flag):
    try:
        es = db_connect.connect_elasticsearch()
        try:
            body = {
                "query": {
                    "bool": {
                        "must": [
                            {"match": { "username": username }}
                        ]
                    }
                }
            }
            raw_data = es.search(index=ElasticConfig.USERS_INDEX, body=body)
            if raw_data['hits']['total'] !=0:
                userid = raw_data['hits']['hits'][0]['_id']
                failure = raw_data['hits']['hits'][0]['_source']['failure']
                if flag == 1:
                    failure = failure + 1
                    body = {
                        "script" : "ctx._source.failure += 1"
                    }
                else:
                    body = {
                        "script" : "ctx._source.failure = 0"
                    }
                raw_data = es.update(index=ElasticConfig.USERS_INDEX, body=body, id=userid)
                if failure >= 3:
                    disable_user(userid)
                if raw_data['result'] == 'updated':
                    return True
                return False
        except:
            logging.exception(msg="Fail")
    except:
        logging.exception(msg="Fail")

def get_user_by_username_password(username, password):
    try:
        es = db_connect.connect_elasticsearch()
        try:
            hashed_password = hash_pass.make_hash(password)
            body = {
                "query": {
                    "bool": {
                        "must": [
                            {"match": { "username": username }},
                            {"match": { "password": hashed_password }}
                        ]
                    }
                }
            }
            raw_data = es.search(index=ElasticConfig.USERS_INDEX, body=body)
            return raw_data
        except:
            logging.exception(msg="Fail")
    except:
        logging.exception(msg="Fail")