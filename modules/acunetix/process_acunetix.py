
import logging
import datetime
import json
import pytz
import re


def processAcunetix(rawData):
    result = {}
    try:
        processing_data = rawData['hits']
        # Backward version of elasticSearch compatitive
        if type(processing_data['total']) == dict:
            result['total'] = processing_data['total']['value']
        else:
            result['total'] = processing_data['total']
        result['records'] = []
        for hit in processing_data['hits']:
            result['records'].append(generateSource(
                hit['_source'], hit.get('_id')))
    except:
        logging.exception(msg="No validated jsonified data to be processed!")
    return json.dumps(result)


def generateSource(raw_source, id):
    source = {}
    try:
        UTC7 = pytz.timezone('Asia/Ho_Chi_Minh')
        source['id'] = id
        source['target'] = raw_source.get('target')
        source['hostname'] = raw_source.get('hostname')
        source['init_time'] = str(datetime.datetime.fromtimestamp(
            int(raw_source['scanstat']['startTime']), tz=UTC7))
        source['scan_time'] = raw_source.get('scanstat').get('duration')
        source['scan_type'] = raw_source.get('scan_type')
        source['vuln_stats'] = raw_source.get('vuln_stats')
        source['scan_id'] = raw_source.get('scan_id')
        source['root_scan_id'] = raw_source.get('root_scan_id')
        source['scan_name'] = raw_source.get('scan_name')
    except:
        logging.exception(msg="Generate Source failed!")
    return source


def processAcunetixDetail(rawData):
    result = {}
    try:
        result['source'] = generateSource(
            rawData.get('_source'), id=rawData.get('_id'))
        result['scan_details'] = []
        for row in rawData.get('_source').get('scan_details'):
            result['scan_details'].append(generateScanDetail(row))
    except:
        logging.exception(msg="No validated jsonified data to be processed!")
    return json.dumps(result)


def generateScanDetail(raw_detail):
    scan_detail = {}
    try:
        scan_detail['vul_id'] = raw_detail.get('vuln_id')
        scan_detail['vul_name'] = raw_detail.get('vt_name')
        scan_detail['affects_url'] = raw_detail.get('affects_url')
        scan_detail['affects_detail'] = raw_detail.get('affects_detail')
        scan_detail['status'] = raw_detail.get('status')
        scan_detail['severity'] = raw_detail.get('severity')
        scan_detail['cvss_score'] = raw_detail.get('cvss_score')
        if scan_detail['cvss_score'] <= 3.9:
            scan_detail['crit_color'] = "green"
        elif scan_detail['cvss_score'] <= 6.9:
            scan_detail['crit_color'] = "yellow"
        elif scan_detail['cvss_score'] <= 8.9:
            scan_detail['crit_color'] = "orange"
        else:
            scan_detail['crit_color'] = "red"
    except:
        logging.exception(msg="No validated jsonified data to be processed!")
    return scan_detail


def generateBody(q, paging_from, paging_size):
    if q is None:
        body = {"from": (paging_from - 1) * paging_size,
                "size": paging_size,
                "query": {"match_all": {}}}
    else:
        body = {"from": (paging_from - 1) * paging_size,
                "size": paging_size,
                "query": {"bool": {"should": []}}}
        fields = ["hostname", "target"]
        list_query = q.split(" ")
        for i in list_query:
            if i != " ":
                q_string = {}
                q_string['query_string'] = {}
                q_string['query_string']['fields'] = fields
                q_string['query_string']['query'] = "*" + i + "*"

                body['query']['bool']['should'].append(q_string)
            else:
                continue
    return json.dumps(body)


def generateSortQuery(sort, index):
    sort_query = ""
    if index == '1':
        sort_query = "target.keyword" + ":" + sort
    elif index == '2':
        sort_query = "hostname.keyword" + ":" + sort
    elif index == '3':
        sort_query = "scanstat.startTime" + ":" + sort
    elif index == '4':
        sort_query = "scanstat.duration" + ":" + sort
    elif index == '5':
        sort_query = "scan_id.keyword" + ":" + sort
    elif index == '6':
        sort_query = "vt_name.keyword" + ":" + sort
    elif index == '7':
        sort_query = "vuln_stats.high:{},vuln_stats.medium:{},vuln_stats.low:{},vuln_stats.informational:{}".format(
            sort, sort, sort, sort)

    return sort_query

    # Detail - Vulnerability


def processDetailVulnerability(rawData, vul_id):
    result = {}
    try:
        # for vul in rawData.get('_source').get('scan_details'):
        #     if vul.get('vuln_id') == str(vul_id):
        #         return json.dumps(generateVulDetail(vul))
        #     else:
        #         return None
        return json.dumps(generateVulDetail(rawData.get('_source')))
    except:
        logging.exception(msg="Error while processing Vulnerability!")


def generateVulDetail(vul):
    result = {}
    try:
        result['vul_id'] = vul.get('vuln_id')
        result['name'] = vul.get('vt_name')
        result['status'] = vul.get('status')
        result['criticality'] = vul.get('criticality')
        result['cvss_score'] = vul.get('cvss_score')
        result['cvss2'] = vul.get('cvss2')
        result['cvss3'] = vul.get('cvss3')
        if result['criticality'] <= 3.9:
            result['crit_color'] = "green"
            result['crit_label'] = "Low"
        elif result['criticality'] <= 6.9:
            result['crit_color'] = "yellow"
            result['crit_label'] = "Medium"
        elif result['criticality'] <= 8.9:
            result['crit_color'] = "orange"
            result['crit_label'] = "Medium-High"
        else:
            result['crit_color'] = "red"
            result['crit_label'] = "High"

        result['description'] = vul.get('description')
        result['attack_detail'] = vul.get('details')
        result['http_request'] = vul.get('request')
        result['http_response'] = "Not Yet"
        result['impact'] = vul.get('impact')
        result['how_to_fix'] = vul.get('recommendation')

        result['cwe'] = []
        for tag in vul.get('tags'):
            if re.search("(CWE-)\d+", tag) != None:
                result['cwe'].append(tag)
            else:
                continue

        result['detailed_info'] = vul.get('long_description')
        result['references'] = vul.get('references')
    except:
        logging.exception(msg="Error while processing Vulnerability!")
    return result
