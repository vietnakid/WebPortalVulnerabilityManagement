
import logging
import datetime
import json
import pytz

def processNmap(rawData):
    try:
        processing_data = rawData['hits']
        result = {}
        result['total'] = processing_data['total']
        result['records'] = []
        for hit in processing_data['hits']:
            # result[''] = hit.get('_id')
            result['records'].append(generateSource(hit['_source'], hit.get('_id')))

        return json.dumps(result)

    except:
        logging.exception(msg="No validated jsonified data to be processed!")


def generateSource(raw_source, id):
    source = {}
    try:
        UTC7 = pytz.timezone('Asia/Ho_Chi_Minh')
        source['id'] = id
        source['target'] = raw_source.get('target')
        source['hostname'] = raw_source.get('hostname')
        source['status'] = "UP" if raw_source.get('status') == "hostUp" else "DOWN"
        source['init_time'] = str(datetime.datetime.fromtimestamp(
                int(raw_source['scanstats']['time']), tz=UTC7))
        source['scan_time'] = raw_source.get('scanstats').get('elapsed')

        # ports in source
        source['openports'] = ""
        ports = []
        
        if len(raw_source.get('openports', {})) != 0:
            for key in raw_source['openports']:
                ports.append(key)
                source['openports'] = ", ".join(ports)
    except:
        logging.exception(msg="Generate Source failed!")
    return source


def processNmapDetail(rawData):
    source = {}
    try:
        source = generateSource(rawData['_source'], id=None)
        source['port'] = generatePortsInfo(rawData['_source']['openports'])
    except:
        logging.exception(msg="No validated jsonified data to be processed!")
    return json.dumps(source)


def generatePortsInfo(raw_port):
    port_info = []
    try:
        for k, v in raw_port.items():
            record = {}
            record['port_number'] = k

            os = "None" if not v.get('ostype') else v['ostype']
            product = "None" if not v.get('product') else v['product']
            version = "None" if not v.get('version') else v['version']

            os_product_version = os + "_" + product + "_" + version
            record['os_product_version'] = os_product_version
            record['name'] = v.get('name')
            record['method'] = v.get('method')

            cpe = []
            for item in v['cpe']:
                cpe.append(item)
            record['cpe'] = cpe if len(cpe) != 0 else None
            if len(cpe) != 0:
                tmp = ","
                record['cpe'] = tmp.join(cpe)

            record['extrainfo'] = v.get('extrainfo')
            port_info.append(record)
    except:
        logging.exception(msg="Generate Port failed!")
    return port_info

def generateBody(q):
    if q is None:
        body = {"query": {"match_all": {}}}
    else:
        body = {"query": {"bool":{"should":[] } } }
        fields = ["hostname^3", "target^3", "openports.*"]
        list_query = q.split(" ")
        for i in list_query:
            q_string = {}
            q_string['query_string'] = {}
            q_string['query_string']['fields'] = fields
            q_string['query_string']['query'] = "*" + i + "*"

            body['query']['bool']['should'].append(q_string)
    return json.dumps(body)
    
def generateSortQuery(sort):
    sort_query = ""
    if sort == "init_asc":
        sort_query = "scanstats.time:asc"
    elif sort == "init_desc":
        sort_query = "scanstats.time:desc"
    return sort_query