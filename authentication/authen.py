import logging
from datetime import datetime

from flask import Flask, render_template, json, request, jsonify, session, redirect, url_for
import DAO.db_connect as db_connect
from config.config import ElasticConfig
from hashlib import md5, sha256

def check_login():
    username = request.form['username']
    password = request.form['password']
    hashed_password = make_hash(password)
    if username is None or password is None:
        return render_template('login.html', error='Username or Password is empty')
    else:
        try:
            es = db_connect.connect_elasticsearch()
            try:
                body = {
                    "query": {
                        "bool": {
                            "must": [
                                {"match": { "username": username }},
                                {"match": { "password": hashed_password }}
                            ]
                        }
                    }
                }
                raw_data = es.search(index=ElasticConfig.USERS_INDEX, body=body)
                processed_data = processUserData(raw_data)
                print(processed_data)
                if processed_data['total'] != 0:
                    session['userid'] = processed_data['userid']
                    session['user'] = processed_data['user']
                    session['verified'] = False
                    if processed_data['user']['firstlogin'] == True:
                        return redirect(url_for('twofactor'))
                    elif processed_data['user']['is_disable'] == False:
                        return redirect(url_for('verify_token'))
                    else:
                        return render_template('login.html', error='This account has been disable due to many failure on login or verify token')
                else:
                    increase_number_of_failure(username)
                    return render_template('login.html', error='Failed to login')
            except:
                logging.exception(msg="Fail")
        except:
            logging.exception(msg="Fail")


def processUserData(rawData):
    result = {}
    try:
        processing_data = rawData['hits']
        result['total'] = processing_data['total']
        if result['total'] != 0:
            result['userid'] = processing_data['hits'][0]['_id']
            result['user'] = processing_data['hits'][0]['_source']
    except:
        logging.exception(msg="No validated jsonified data to be processed!")
    return result

def make_hash(s):
    md5hash = md5(s.encode('utf-8')).hexdigest()
    return sha256(md5hash.encode('utf-8')).hexdigest()

def check_disabled_user(username):
    try:
        es = db_connect.connect_elasticsearch()
        try:
            body = {
                "query": {
                    "bool": {
                        "must": [
                            {"match": { "username": username }}
                        ]
                    }
                }
            }
            raw_data = es.search(index=ElasticConfig.USERS_INDEX, body=body)
            processed_data = processUserData(raw_data)
            if processed_data['total'] !=0:
                is_disable = processed_data['user']['is_disable']
                return is_disable
        except:
            logging.exception(msg="Fail")
    except:
        logging.exception(msg="Fail")

def disable_user_on_failure(userid, failure):
    # failure = session['failure']
    if failure == 3:
        try:
            es = db_connect.connect_elasticsearch()
            try:
                body = {
                    "script" : "ctx._source.is_disable = true"
                }
                # userid = session['userid']
                es.update(index=ElasticConfig.USERS_INDEX, body=body, id=userid)
            except:
                logging.exception(msg="Fail")
        except:
            logging.exception(msg="Fail")

def increase_number_of_failure(username):
    try:
        es = db_connect.connect_elasticsearch()
        try:
            body = {
                "query": {
                    "bool": {
                        "must": [
                            {"match": { "username": username }}
                        ]
                    }
                }
            }
            raw_data = es.search(index=ElasticConfig.USERS_INDEX, body=body)
            processed_data = processUserData(raw_data)
            if processed_data['total'] !=0:
                failure = processed_data['user']['failure']
                userid = processed_data['userid']
                body = {
                    "script" : "ctx._source.failure += 1"
                }
                es.update(index=ElasticConfig.USERS_INDEX, body=body, id=userid)
                session.modified = True
                failure = failure + 1
                disable_user_on_failure(userid, failure)
        except:
            logging.exception(msg="Fail")
    except:
        logging.exception(msg="Fail")

def change_firstlogin():
    try:
        es = db_connect.connect_elasticsearch()
        try:
            body = {
                "script" : "ctx._source.firstlogin = false"
            }
            userid = session['userid']
            es.update(index=ElasticConfig.USERS_INDEX, body=body, id=userid)
            session.modified = True
            session['user']['firstlogin'] = False
            print (session['user'])
        except:
            logging.exception(msg="Fail")
    except:
        logging.exception(msg="Fail")