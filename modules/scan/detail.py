# Import from standard library
import logging
import datetime

# Import from third-party
from flask import Flask, render_template, json, request, jsonify
import pytz

# Import local files
import DAO.db_connect as db_connect
from config.config import ElasticConfig

def scan_detail(root_scan_id):
    try:
        es = db_connect.connect_elasticsearch()
        try:
            search_query = request.args.get('q') or ''
            _search_query = ' '.join('*'+_+'*' for _ in search_query.split(' '))

            query_body = {
                            "_source": ["target", "hostname","scan_id", "root_scan_id", "scanstat.startTime"],
                            "size": ElasticConfig.DEFAULT_PAGE_SIZE,
                            "query": {
                                "bool": {
                                    "must": [
                                        {
                                            "match": {
                                                "root_scan_id": root_scan_id
                                            }
                                        }
                                    ],
                                    "filter": {
                                        "bool": {
                                            "should": [
                                            {
                                                "query_string": {
                                                "fields": ["scan_id", "target", "hostname"],
                                                "query": _search_query
                                                }
                                            }
                                            ]
                                        }
                                    }
                                }
                                }
                            }

            all_targets_data = es.search(index = ElasticConfig.NMAP_INDEX, body = query_body)
            
            root_scan_data = es.get(index = ElasticConfig.SCAN_INDEX, doc_type = '_doc', id=root_scan_id)['_source']
            root_scan_data = processRootScanData(root_scan_data)

            processed_data = processAllTargetsData(all_targets_data)

            processed_data = getSummaryResult(processed_data, root_scan_id, _search_query)

            return render_template('scan-detail.html', response=processed_data, root_scan_data=root_scan_data, search_query=search_query)
        except:
            logging.exception(msg="Fail")
    except:
        logging.exception(msg="Fail")

def processAllTargetsData(rawData):
    try:
        UTC7 = pytz.timezone('Asia/Ho_Chi_Minh')
        processing_data = rawData['hits']
        result = {}
        result['total'] = processing_data['total']
        result['records'] = []
        for hit in processing_data['hits']:
            _source = hit['_source']
            _source['start_time'] = str(datetime.datetime.fromtimestamp(
                int(_source["scanstat"]["startTime"]), tz=UTC7))
            del _source["scanstat"]
            _source["id"] = hit.get('_id')
            result['records'].append(_source)
        return result

    except:
        logging.exception(msg="No validated jsonified data to be processed!")

def processRootScanData(root_scan_Data):
    UTC7 = pytz.timezone('Asia/Ho_Chi_Minh')
    root_scan_Data['next_run_at'] = str(datetime.datetime.fromtimestamp(int(root_scan_Data["next_run_at"]), tz=UTC7))
    root_scan_Data['run_interval'] = str(datetime.datetime.fromtimestamp(int(root_scan_Data["run_interval"]), tz=UTC7))
    root_scan_Data['created_date'] = str(datetime.datetime.fromtimestamp(int(root_scan_Data["created_date"]), tz=UTC7))
    return root_scan_Data

def getSummaryResult(processed_data, root_scan_id, _search_query):
    result = dict()
    try:
        resultAcunetix = getDataFromElastic(processed_data, root_scan_id, _search_query)
        for i in range(len(processed_data["records"])):
            record = processed_data["records"][i]
            identification = record.get("scan_id") + '_' + record.get("target")
            processed_data["records"][i]["summary_result"] = {
                "low" : 0,
                "informational" : 0,
                "high" : 0,
                "medium" : 0
            }

            processed_data["records"][i]["summary_result"]['informational'] += resultAcunetix.get(identification, dict()).get('informational', 0)
            processed_data["records"][i]["summary_result"]['low'] += resultAcunetix.get(identification, dict()).get('low', 0)
            processed_data["records"][i]["summary_result"]['medium'] += resultAcunetix.get(identification, dict()).get('medium', 0)
            processed_data["records"][i]["summary_result"]['high'] += resultAcunetix.get(identification, dict()).get('high', 0)
    except:
        logging.exception(msg="Something went wrong!")
    return processed_data

def getDataFromElastic(processed_data, root_scan_id, _search_query):
    result = dict()
    try:
        es = db_connect.connect_elasticsearch()
        query_body = {
            "query": {
                "bool": {
                    "must": [
                        {
                            "match": {
                                "root_scan_id": root_scan_id
                            }
                        }
                    ],
                    "filter": {
                        "bool": {
                            "should": [
                            {
                                "query_string": {
                                "fields": ["scan_id", "target", "hostname"],
                                "query": _search_query
                                }
                            }
                            ]
                        }
                    }
                }
            },
            "size": 0,
            "aggs": {
                "group_by_scan_id": {
                    "terms": {
                        "field": "scan_id.keyword",
                        "size": ElasticConfig.MAX_SIZE_AGGS
                    },
                    "aggs": {
                        "group_by_target": {
                            "terms": {
                                "field": "target.keyword",
                                "size": ElasticConfig.MAX_SIZE_AGGS
                            },
                            "aggs": {
                                "informational": {
                                    "sum": {
                                        "field": "vuln_stats.informational"
                                    }
                                },
                                "low": {
                                    "sum": {
                                        "field": "vuln_stats.low"
                                    }
                                },
                                "medium": {
                                    "sum": {
                                        "field": "vuln_stats.medium"
                                    }
                                },
                                "high": {
                                    "sum": {
                                        "field": "vuln_stats.high"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        rawData = es.search(index=[ElasticConfig.ACUNETIX_SUMMARY_INDEX , ElasticConfig.CVESEARCH_INDEX, ElasticConfig.NESSUS_INDEX], body=query_body)
        scan_id_buckets = rawData['aggregations']["group_by_scan_id"]["buckets"]
        for scan_id_bucket in scan_id_buckets:
            scan_id = scan_id_bucket.get('key')
            target_buckets = scan_id_bucket['group_by_target']['buckets']
            for target_bucket in target_buckets:
                target = target_bucket.get('key')
                res = {
                    "low" : int(target_bucket['low']['value']),
                    "informational" : int(target_bucket['informational']['value']),
                    "high" : int(target_bucket['high']['value']),
                    "medium" : int(target_bucket['medium']['value'])
                }
                result[scan_id + '_' + target] =  res

    except:
        logging.exception(msg="Something went wrong!")
    return result