
import logging
import datetime
import json
import pytz


def processWappalyzer(raw_data):
    try:
        processing_data = raw_data['hits']
        result = {}
        result['total'] = processing_data['total']
        result['data'] = []
        for record in processing_data['hits']:
            result['data'].append(generateSource(record))

    except:
        logging.exception(msg="No validated jsonified data to be processed!")
    return json.dumps(result)


def generateSource(raw_data):
    data = {}
    try:
        data['id'] = raw_data['_id']
        raw_source = raw_data['_source']

        data['hostname'] = raw_source.get('hostname')
        data['target'] = raw_source.get('target')
        data['result'] = []
        for port in raw_source['result']:
            temp = {}
            temp['port'] = port['port']
            temp['applications'] = []
            for app in port['applications']:
                apps = {}
                apps['name'] = app['name']
                if app['version'] != None:
                    apps['version'] = app['version']
                else:
                    apps['version'] = ''
                temp['applications'].append(apps)
            data['result'].append(temp)

        data['scan_id'] = raw_source.get('scan_id')
        data['root_scan_id'] = raw_source.get('root_scan_id')
        data['scan_name'] = raw_source.get('scan_name')
    except:
        logging.exception(msg="Generate Source failed!")
    return data


def processWappalyzerDetail(raw_data):
    data = {}
    try:
        raw_source = raw_data['_source']
        data['hostname'] = raw_source.get('hostname')
        data['target'] = raw_source.get('target')
        data['scan_id'] = raw_source.get('scan_id')
        data['root_scan_id'] = raw_source.get('root_scan_id')
        data['scan_name'] = raw_source.get('scan_name')
        data['result'] = []
        for port in raw_source['result']:
            temp = {}
            temp['port'] = port['port']
            temp['applications'] = []
            for app in port['applications']:
                apps = {}
                apps['name'] = app['name']
                apps['web'] = app['website']
                if app['version'] != None:
                    apps['version'] = app['version']
                else:
                    apps['version'] = ''
                temp['applications'].append(apps)
            data['result'].append(temp)
    except:
        logging.exception(msg="No validated jsonified data to be processed!")
    return json.dumps(data)
