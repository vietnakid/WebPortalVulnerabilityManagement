
import logging
import datetime
import json
import pytz

def process_vulnerability(raw_data):
    try:
        processing_data = raw_data.get('hits')
        vulnerabilites = []
        for record in processing_data.get('hits'):
            if is_empty_vul(record.get('_source'), index=record.get('_index')): 
                continue
            else:
                vul = generate_common_info(record.get('_id'), record.get('_source'))

                # 1 doc can has multiple vuls with same common infomation
                vuls = generate_info_based_on_index(vul, record.get('_index'), record.get('_source'))
                vulnerabilites.extend(vuls)
    except:
        logging.exception(msg="Error while processing Vulnerabilities!")
    return json.dumps(vulnerabilites)

# Check the source of the doc has vulnerabilities or not, return True if has 0 vul.
def is_empty_vul(source, index):
    if index == "nessus" or index == "acunetix_summary":
        if source.get('scan_details') == [] or source.get('scan_details') == {}: return True 
    elif index == "nikto":
        if source.get('vulnerabilities') == [] or source.get('vulnerabilities') == {}: return True
    elif index == "cvesearch":
        if source.get('weakness') == [] or source.get('weakness') == {}: return True
    return False

def generate_common_info(id, source):
    UTC7 = pytz.timezone('Asia/Ho_Chi_Minh')
    vul = {}
    vul['id'] = id
    vul['time_scan'] = str(datetime.datetime.fromtimestamp(int(source['scanstat']['startTime']), tz=UTC7))
    vul['target'] = source.get('target')
    vul['hostname'] = source.get('hostname')
    vul['root_scan_id'] = source.get('root_scan_id')
    vul['scan_name'] = source.get('scan_name')
    vul['scan_type'] = "Full Scan" if source.get('scan_type') == "full_scan" else "Non-commercial"
    return vul

def generate_info_based_on_index(vul, index, source):
    vuls = []
    if index == "nessus":
        vul['index'] = "Nessus"
        for vul_record in source.get('scan_details'):
            vul['name'] = vul_record.get('pluginname')
            vul['level'] = vul_record.get('cvss')
            vul['link'] = "/nessus/detail/" + vul['id']
    elif index == "nikto":
        vul['index'] = "Nikto"
        for vul_record in source.get('vulnerabilities'):
            vul['name'] = vul_record.get("OSVDB") if vul_record.get("OSVDB") != "0" else "None"
            vul['level'] = "NaN"
            vul['link'] = "/nikto/detail?id=" + vul['id']
    elif index == "acunetix_summary":
        vul['index'] = "Acunetix"
        for vul_record in source.get('scan_details'):
            vul['name'] = vul_record.get('vt_name')
            vul['level'] = vul_record.get('cvss_score')
            vul['link'] = "/acunetix/detail/" + vul['id'] + "/" + vul_record.get('vuln_id')
    elif index == "cvesearch":
        vul['index'] = "CVE-Search"
        for vul_record in source.get('weakness'):
            vul['name'] = vul_record.get('cve')
            vul['level'] = vul_record.get('cvss')
            vul['link'] = "/cve/detail?id=" + vul['id']
    vul['cvss_color'] = generate_cvss_color(vul['level'])

    vuls.append(vul)
    return vuls

def generate_cvss_color(cvss):
    if cvss == "NaN" : return "grey"
    try:
        if cvss <= 3.9:
            return "green"
        elif cvss <= 6.9:
            return "yellow"
        elif cvss < 8.9:
            return "orange"
        else:
            return "red"
    except:
        logging.exception(msg="Invalid CVSS!")
    return "grey"


def generateBody(q, paging_from, paging_size):
    body = {"from": (paging_from - 1) * paging_size,
            "size": paging_size}
    body['_source'] = ["id", "target", "hostname", "scanstat", "scan_type", "root_scan_id", "scan_name"
                            ,"scan_details", "vulnerabilities", "weakness"]
    if q is None:
        body['query'] = {"match_all": {}}

    else:
        body = {"from": (paging_from - 1) * paging_size,
                "size": paging_size,
                "query": {"bool":{"should":[] } } }
        query_fields = ["scan_details.pluginname", "vulnerabilities.OSVDB", "scan_details.vt_name", "weakness.cve", 
                        "hostname", "target", "scan_name"]
        list_query = q.split(" ")
        for i in list_query:
            if i != " ":
                q_string = {}
                q_string['query_string'] = {}
                q_string['query_string']['fields'] = query_fields
                q_string['query_string']['query'] = "*" + i + "*"
                print(q_string['query_string']['query'])

                body['query']['bool']['should'].append(q_string)
            else:
                continue
    return json.dumps(body)

def generateSortQuery(sort):
    sort_query = ""
    if sort == "init_asc":
        sort_query = "scanstat.startTime:asc"
    elif sort == "init_desc":
        sort_query = "scanstat.startTime:desc"
    return sort_query