import logging
import datetime
import json
import pytz


def processNikto(rawData):
    result = {}
    try:
        processing_data = rawData.get('hits')
        result['total'] = processing_data.get('total')
        result['records'] = []
        for hit in processing_data.get('hits'):
            result['records'].append(generateSource(
                hit.get('_source'), hit.get('_id')))
    except:
        logging.exception(msg="No validated jsonified data to be processed!")
    return json.dumps(result)


def generateSource(raw_source, id):
    source = {}
    try:
        UTC7 = pytz.timezone('Asia/Ho_Chi_Minh')
        source['id'] = id
        source['target'] = raw_source.get('target')
        source['hostname'] = raw_source.get('hostname')
        source['port_scanned'] = raw_source.get('portScanned')
        source['banner'] = raw_source.get('banner')
        source['vuln_stats'] = raw_source.get('vuln_stats')

        source['init_time'] = str(datetime.datetime.fromtimestamp(
            int(raw_source['scanstat']['startTime']), tz=UTC7))
        source['scan_time'] = raw_source.get('scanstat').get('duration')

        source['scan_id'] = raw_source.get('scan_id')
        source['root_scan_id'] = raw_source.get('root_scan_id')
        source['scan_name'] = raw_source.get('scan_name')
    except:
        logging.exception(msg="Generate Source failed!")
    return source


def processNiktoDetail(rawData):
    source = {}
    try:
        source = generateSource(rawData.get('_source'), id=None)
        source['vulnerabilities'] = rawData.get(
            '_source').get('vulnerabilities')
    except:
        logging.exception(msg="No validated jsonified data to be processed!")
    return json.dumps(source)


def generateBody(q, paging_from, paging_size):
    if q is None:
        body = {"from": paging_from,
                "size": paging_size,
                "query": {"match_all": {}}}
    else:
        body = {"from": paging_from,
                "size": paging_size,
                "query": {"bool": {"should": []}}}
        fields = ["hostname", "target", "portScanned"]
        list_query = q.split(" ")
        for i in list_query:
            if i != " ":
                q_string = {}
                q_string['query_string'] = {}
                q_string['query_string']['fields'] = fields
                q_string['query_string']['query'] = "*" + i + "*"

                body['query']['bool']['should'].append(q_string)
            else:
                continue
    return json.dumps(body)


def generateSortQuery(sort, index):
    sort_query = ""
    if index == '1':
        sort_query = "target.keyword" + ":" + sort
    elif index == '2':
        sort_query = "hostname.keyword" + ":" + sort
    elif index == '3':
        sort_query = "portScanned.keyword" + ":" + sort
    elif index == '4':
        sort_query = "scanstat.startTime" + ":" + sort
    elif index == '5':
        sort_query = "scanstat.duration" + ":" + sort
    elif index == '6':
        sort_query = "scan_id.keyword" + ":" + sort
    elif index == '7':
        sort_query = "scan_name.keyword" + ":" + sort
    elif index == '8':
        sort_query = "scan_name.keyword" + ":" + sort

    return sort_query
