# Import from standard library
import logging
import datetime
import json

# Import from third-party
from flask import Flask, render_template, json, request, jsonify
import pytz

# Import local files
import DAO.db_connect as db_connect
from config.config import ElasticConfig

DEFAULT_SORT = "created_date:desc"

def scan_overview():
    try:
        es = db_connect.connect_elasticsearch()
        try:
            # Process sort and body from arguments
            search_query = request.args.get('q') or ''
            _search_query = ' '.join('*'+_+'*' for _ in search_query.split(' '))
            raw_sort = request.args.get('sort')
            sort_query = DEFAULT_SORT if raw_sort is None else DEFAULT_SORT if raw_sort == 'init_desc' else "created_date:asc"
            query_body = {
                            "_source": ["target", "created_date","next_run_at", "next_run_at", "run_interval", "scan_type", "scanned_time"],
                            "size": ElasticConfig.DEFAULT_PAGE_SIZE,
                            "query": {
                                "bool": {
                                    "filter": {
                                        "bool": {
                                            "should": [
                                            {
                                                "query_string": {
                                                "fields": ["target"],
                                                "query": _search_query
                                                }
                                            }
                                            ]
                                        }
                                    }
                                }
                                }
                            }
            # Process data
            rawData = es.search(
                index=ElasticConfig.SCAN_INDEX, body=query_body, 
                size=ElasticConfig.DEFAULT_PAGE_SIZE, sort=sort_query)

            processed_data = processScan(rawData)
        except:
            logging.exception(msg="Fail")
    except:
        logging.exception(msg="Fail")
    return render_template('scan.html', response=processed_data, search_query=search_query, sorting=sort_query)

def processScan(rawData):
    try:
        UTC7 = pytz.timezone('Asia/Ho_Chi_Minh')
        processing_data = rawData['hits']
        result = {}
        result['total'] = processing_data['total']
        result['records'] = []
        for hit in processing_data['hits']:
            _source = hit['_source']
            _source["id"] = hit.get('_id')
            _source['created_date'] = str(datetime.datetime.fromtimestamp(
                    int(_source.get('created_date')), tz=UTC7))
            _source['next_run_at'] = str(datetime.datetime.fromtimestamp(
                    int(_source.get('next_run_at')), tz=UTC7)) 
                    
            _source['summary_result'] = getSummaryResult(_source["id"])    

            result['records'].append(_source)

        return result

    except:
        logging.exception(msg="No validated jsonified data to be processed!")

def getSummaryResult(root_scan_id):
    result = {
        "low" : 0,
        "informational" : 0,
        "high" : 0,
        "medium" : 0
    }
    try:
        resultAcunetix = getDataFromAcunetix(root_scan_id)
        resultCVESearch = getDataFromCVESearch(root_scan_id)
        result = resultAcunetix
        result['low'] += resultCVESearch['low']
        result['medium'] += resultCVESearch['medium']
        result['high'] += resultCVESearch['high']
    except:
        logging.exception(msg="Something went wrong!")
    return result

def getDataFromAcunetix(root_scan_id):
    result = {
        "low" : 0,
        "informational" : 0,
        "high" : 0,
        "medium" : 0
    }
    try:
        es = db_connect.connect_elasticsearch()
        query_body = {
                        "size": 0,
                        "query": {
                            "bool": {
                                "must": [
                                {
                                    "match": {
                                        "root_scan_id": root_scan_id
                                    }
                                }
                                
                                ]
                            }
                        },
                        "aggs": {
                            "informational": {
                                "sum": {
                                    "field": "vuln_stats.informational"
                                }
                            },
                            "low": {
                                "sum": {
                                    "field": "vuln_stats.low"
                                }
                            },
                            "medium": {
                                "sum": {
                                    "field": "vuln_stats.medium"
                                }
                            },
                            "high": {
                                "sum": {
                                    "field": "vuln_stats.high"
                                }
                            }
                        }
                    }
        rawData = es.search(index=ElasticConfig.ACUNETIX_SUMMARY_INDEX, body=query_body)
        processing_data = rawData['aggregations']
        result = {
            "low" : int(processing_data["low"]["value"]),
            "informational" : int(processing_data["informational"]["value"]),
            "high" : int(processing_data["high"]["value"]),
            "medium" : int(processing_data["medium"]["value"])
        }

    except:
        logging.exception(msg="Something went wrong!")
    return result

def getDataFromCVESearch(root_scan_id):
    result = {
        "low" : 0,
        "informational" : 0,
        "high" : 0,
        "medium" : 0
    }
    try:
        es = db_connect.connect_elasticsearch()
        query_body = {
                        "size": 0,
                        "query": {
                            "bool": {
                                "must": [
                                {
                                    "match": {
                                        "root_scan_id": root_scan_id
                                    }
                                }
                                
                                ]
                            }
                            },
                        "aggs": {
                            "vul_stats": {
                            "range": {
                                "field": "weakness.cvss",
                                "ranges": [
                                {
                                    "to": 3.9,
                                    "key": "low"
                                },
                                {
                                    "from": 4.0,
                                    "to": 6.9,
                                    "key": "medium"
                                },
                                {
                                    "from": 7.0,
                                    "key": "high"
                                }
                                ]
                            }
                            }
                        }
                    }
        rawData = es.search(index=ElasticConfig.CVESEARCH_INDEX, body=query_body)
        processing_data = rawData['aggregations']["vul_stats"]["buckets"]
        for data in processing_data:
            result[data.get("key")] += data.get("doc_count")
    except:
        logging.exception(msg="Something went wrong!")
    return result