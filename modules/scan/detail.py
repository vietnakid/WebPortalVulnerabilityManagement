# Import from standard library
import logging
import datetime

# Import from third-party
from flask import Flask, render_template, json, request, jsonify
import pytz

# Import local files
import DAO.db_connect as db_connect
from config.config import ElasticConfig

def scan_detail(root_scan_id):
    try:
        es = db_connect.connect_elasticsearch()
        try:
            search_query = request.args.get('q') or ''
            _search_query = ' '.join('*'+_+'*' for _ in search_query.split(' '))

            query_body = {
                            "_source": ["target", "hostname","scan_id", "root_scan_id", "scanstat.startTime"],
                            "size": ElasticConfig.DEFAULT_PAGE_SIZE,
                            "query": {
                                "bool": {
                                    "must": [
                                        {
                                            "match": {
                                                "root_scan_id": root_scan_id
                                            }
                                        }
                                    ],
                                    "filter": {
                                        "bool": {
                                            "should": [
                                            {
                                                "query_string": {
                                                "fields": ["scan_id", "target", "hostname"],
                                                "query": _search_query
                                                }
                                            }
                                            ]
                                        }
                                    }
                                }
                                }
                            }

            all_targets_data = es.search(index = ElasticConfig.NMAP_INDEX, body = query_body)
            
            root_scan_data = es.get(index = ElasticConfig.SCAN_INDEX, doc_type = '_doc', id=root_scan_id)['_source']
            root_scan_data = processRootScanData(root_scan_data)

            processed_data = processAllTargetsData(all_targets_data)
            return render_template('scan-detail.html', response=processed_data, root_scan_data=root_scan_data, search_query=search_query)
        except:
            logging.exception(msg="Fail")
    except:
        logging.exception(msg="Fail")

def processAllTargetsData(rawData):
    try:
        UTC7 = pytz.timezone('Asia/Ho_Chi_Minh')
        processing_data = rawData['hits']
        result = {}
        result['total'] = processing_data['total']
        result['records'] = []
        for hit in processing_data['hits']:
            _source = hit['_source']
            _source['start_time'] = str(datetime.datetime.fromtimestamp(
                int(_source["scanstat"]["startTime"]), tz=UTC7))
            del _source["scanstat"]
            _source["id"] = hit.get('_id')
            result['records'].append(_source)
        return result

    except:
        logging.exception(msg="No validated jsonified data to be processed!")

def processRootScanData(root_scan_Data):
    UTC7 = pytz.timezone('Asia/Ho_Chi_Minh')
    root_scan_Data['next_run_at'] = str(datetime.datetime.fromtimestamp(int(root_scan_Data["next_run_at"]), tz=UTC7))
    root_scan_Data['run_interval'] = str(datetime.datetime.fromtimestamp(int(root_scan_Data["run_interval"]), tz=UTC7))
    root_scan_Data['created_date'] = str(datetime.datetime.fromtimestamp(int(root_scan_Data["created_date"]), tz=UTC7))
    return root_scan_Data
