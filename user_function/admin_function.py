import logging
from datetime import datetime

from flask import Flask, render_template, request
import DAO.db_connect as db_connect
from config.config import ElasticConfig

from hash_function import hash_pass
import math
import base64
import os
import re
import pytz


def get_all_user(msg=""):
    try:
        es = db_connect.connect_elasticsearch()
        try:
            paging_size = 10
            paging_from = int(request.args.get('page') or 1)
            sort_query = "timestamp_created:asc"
            query_body = {
                "from": (paging_from - 1) * paging_size,
                "size": paging_size
            }
            raw_data = es.search(index=ElasticConfig.USERS_INDEX, size=paging_size, body=query_body, sort=sort_query)
            processed_data = processUserData(raw_data)
            if processed_data['total'] != 0:
                paging_total = processed_data['total']
                paging = {
                    "paging_from": paging_from,
                    "paging_size": paging_size,
                    "paging_total": paging_total,
                    "left_page": max(paging_from - 2, 1),
                    "right_page": min(max(paging_from - 2, 1) + 4, math.ceil(paging_total / paging_size))
                }
                all_user = processed_data['users']
                return render_template('manage-user.html', records=all_user, paging=paging, msg=msg)
            else:
                return render_template('manage-user.html')
        except:
            logging.exception(msg="Fail")
    except:
        logging.exception(msg="Fail")

def add_user():
    username = request.form['username']
    password = request.form['password']
    fullname = request.form['fullname']
    role = request.form['role']
    _role = -1
    try:
        _role = int(role)
    except:
        pass
    if not validate_username(username):
        return render_template('new-user.html', create_result="Username must longer than 3 character and not contain space")
    elif not validate_password(password):
        check_list = """
        Passwords will contain at least 1 upper case letter\n
        Passwords will contain at least 1 lower case letter\n
        Passwords will contain at least 1 number or special character\n
        Passwords will contain at least 8 characters in length\n
        """
        return render_template('new-user.html', create_result="Password is not validated" + check_list)
    elif fullname == "":
        return render_template('new-user.html', create_result="Full name can't be blank")
    elif _role != 0 and _role != 1:
        return render_template('new-user.html', create_result="This role does not exist")
    if not check_username_exist(username):
        try:
            es = db_connect.connect_elasticsearch()
            try:
                otp_secret = base64.b32encode(os.urandom(15)).decode('utf-8')
                _password = hash_pass.make_hash(password)
                timestamp_created = datetime.timestamp(datetime.now())
                body = {
                    "username": username,
                    "password": _password,
                    "firstlogin": True,
                    "fullname": fullname,
                    "role": _role,
                    "otp_secret": otp_secret,
                    "is_disable": False,
                    "failure": 0,
                    "timestamp_created": timestamp_created
                }
                raw_data = es.index(index=ElasticConfig.USERS_INDEX, body=body)
                if raw_data['result'] == "created":
                    return render_template('new-user.html', create_result="Added Successful")
                else:
                    return render_template('new-user.html', create_result="Failed to add user")
            except:
                logging.exception(msg="Fail")
        except:
            logging.exception(msg="Fail")
    else:
        return render_template('new-user.html', create_result="This username already exist, try again")

def validate_username(username):
    if " " in username or len(username) < 4:
        return False
    return True

def validate_password(password):
    regex = "(?=^.{8,}$)((?=.*\d)|(?=.*\W+))(?![.\n])(?=.*[A-Z])(?=.*[a-z]).*$"
    if re.match(regex, password):
        return True
    return False

def delete_user(userid):
    try:
        es = db_connect.connect_elasticsearch()
        try:
            raw_data = es.delete(index=ElasticConfig.USERS_INDEX, id=userid)
            return get_all_user("Delete user successful")
        except elasticsearch.exceptions.NotFoundError:
            return get_all_user(msg="User not found")
        except:
            logging.exception(msg="Fail")
    except:
        logging.exception(msg="Fail")

def check_username_exist(username):
    try:
        es = db_connect.connect_elasticsearch()
        try:
            body = {
                "query": {
                    "bool": {
                        "must": [
                            {"match": { "username": username }}
                        ]
                    }
                }
            }
            raw_data = es.search(index=ElasticConfig.USERS_INDEX, body=body)
            processed_data = processUserData(raw_data)
            if processed_data['total'] != 0:
                return True
            else:
                return False
        except:
            logging.exception(msg="Fail")
    except:
        logging.exception(msg="Fail")

def enable_user(userid):
    try:
        es = db_connect.connect_elasticsearch()
        try:
            body = {
                "script" : "ctx._source.is_disable = false"
            }
            es.update(index=ElasticConfig.USERS_INDEX, body=body, id=userid)
            return get_all_user("Enable user successful")
        except:
            logging.exception(msg="Fail")
    except:
        logging.exception(msg="Fail")

def disable_user(userid):
    try:
        es = db_connect.connect_elasticsearch()
        try:
            body = {
                "script" : "ctx._source.is_disable = true"
            }
            es.update(index=ElasticConfig.USERS_INDEX, body=body, id=userid)
            return get_all_user("Disable user successful")
        except:
            logging.exception(msg="Fail")
    except:
        logging.exception(msg="Fail")

#Change status firstlogin
def first_login(userid):
    try:
        es = db_connect.connect_elasticsearch()
        try:
            body = {
                "script" : "ctx._source.firstlogin = true"
            }
            es.update(index=ElasticConfig.USERS_INDEX, body=body, id=userid)
            return get_all_user("Re-create OTP successful")
        except:
            logging.exception(msg="Fail")
    except:
        logging.exception(msg="Fail")

def get_user_by_id(userid):
    try:
        es = db_connect.connect_elasticsearch()
        try:
            raw_data = es.get(index=ElasticConfig.USERS_INDEX, id=userid)
            if raw_data['found']:
                result = raw_data['_source']
                result['id'] = raw_data['_id']
                return result
            else:
                return []
        except:
            logging.exception(msg="Fail")
    except:
        logging.exception(msg="Fail")

def update_user_by_admin():
    userid = request.form['id']
    new_password = request.form['password']
    fullname = request.form['fullname']
    role = request.form['role']
    _role = -1
    try:
        _role = int(role)
    except:
        pass
    
    if not validate_password(new_password):
        user = get_user_by_id(userid)
        return render_template('update-user-by-admin.html', result="Password is not validated", user=user)
    elif not get_user_by_id(userid):
        user = get_user_by_id(userid)
        return render_template('update-user-by-admin.html', result="This ID not exists", user=user)
    elif fullname == "":
        user = get_user_by_id(userid)
        return render_template('update-user-by-admin.html', result="Full name can't be blank", user=user)
    elif _role != 0 and _role != 1:
        user = get_user_by_id(userid)
        return render_template('update-user-by-admin.html', result="This role does not exist", user=user)
    
    try:
        hashed_password = hash_pass.make_hash(new_password)
        es = db_connect.connect_elasticsearch()
        try:
            script = "ctx._source.password = '{}'; ctx._source.fullname = '{}'; ctx._source.role = {};".format(hashed_password, fullname, role)
            body = {
                "script": script
            }
            es.update(index=ElasticConfig.USERS_INDEX, body=body, id=userid)
            user = get_user_by_id(userid)
            return render_template('update-user-by-admin.html', result="Update successful", user=user)
        except:
            logging.exception(msg="Fail")
    except:
        logging.exception(msg="Fail")

def processUserData(rawData):
    result = {}
    result['users'] = []
    try:
        processing_data = rawData['hits']
        result['total'] = processing_data['total']['value']
        if result['total'] != 0:
            UTC7 = pytz.timezone('Asia/Ho_Chi_Minh')
            for hit in processing_data['hits']:
                _source = hit['_source']
                _source['created_date'] = str(datetime.fromtimestamp(int(_source['timestamp_created']), tz=UTC7))
                _source["id"] = hit.get('_id')
                result['users'].append(_source)
    except:
        logging.exception(msg="No validated jsonified data to be processed!")
    return result

