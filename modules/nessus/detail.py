# Import from standard library
import logging
import datetime

# Import from third-party
from flask import Flask, render_template, json, request, jsonify, render_template_string, session
from jinja2 import Environment, BaseLoader
import pytz

# Import local files
import DAO.db_connect as db_connect
from config.config import ElasticConfig

def nessus_detail(id):
    if id is None:
        return render_template('404.html')
    else:
        try:
            es = db_connect.connect_elasticsearch()
            try:
                raw_data = es.get(index=ElasticConfig.NESSUS_INDEX,
                                  doc_type="_doc", id=id)   
                # print(raw_data)
                processed_data = processNessusDetail(raw_data)
            except:
                logging.exception(msg="Fail")
                return render_template('404.html')
        except:
            logging.exception(msg="Fail")
            return render_template('404.html')
    session['module'] = "nessus"
    return render_template('nessus-detail.html', response=processed_data)

def processNessusDetail(rawData):
    try:
        UTC7 = pytz.timezone('Asia/Ho_Chi_Minh')
        _source = rawData['_source']
        result = {}
        result["id"] = _source.get('id')
        result['scan_details'] = _source.get("scan_details")
        result['init_time'] = str(datetime.datetime.fromtimestamp(
                int(_source.get('scanstat').get("startTime")), tz=UTC7))
        result['scan_time'] = int(_source.get('scanstat').get("duration"))
        result['root_scan_id'] = _source.get('root_scan_id')
        result['scan_id'] = _source.get('scan_id')
        result['scan_name'] = _source.get('scan_name')
        result['target'] = _source.get('target')
        result['hostname'] = _source.get('hostname')
        result['vuln_stats'] = _source.get('vuln_stats')
        result['scanstat'] = _source.get('scanstat')

        return result

    except:
        logging.exception(msg="No validated jsonified data to be processed!")