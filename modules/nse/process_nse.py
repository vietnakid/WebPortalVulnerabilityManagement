
import logging
import datetime
import json
import pytz

def processNSE(raw_data):
    try:
        processing_data = raw_data['hits']
        result = {}
        result['total'] = processing_data['total']
        result['data'] = []
        for record in processing_data['hits']:
            result['data'].append(generateSource(record))

    except:
        logging.exception(msg="No validated jsonified data to be processed!")
    return json.dumps(result)


def generateSource(raw_data):
    data = {}
    try:
        UTC7 = pytz.timezone('Asia/Ho_Chi_Minh')
        data['id'] = raw_data['_id']
        raw_source = raw_data['_source']

        data['hostname'] = raw_source.get('hostname')
        data['target'] = raw_source.get('target')
        data['status'] = "UP" if raw_source.get('status') == "hostUp" else "DOWN"
        data['init_time'] = str(datetime.datetime.fromtimestamp(
            int(raw_source['scanstats']['time']), tz=UTC7))
        data['scan_time'] = raw_source['scanstats']['elapsed']
        data['nse_script'] = countNSE(raw_source['nseOutputs'])
    except:
        logging.exception(msg="Generate Source failed!")
    return data


def countNSE(nse):
    count = 0
    for i in nse.values():
        for k, v in i.items():
            if k is not None and v is not None:
                count += 1
    return count

def processNSEDetail(raw_data):
    try:
        UTC7 = pytz.timezone('Asia/Ho_Chi_Minh')
        raw_source = raw_data.get('_source')
        data = {}

        data['hostname'] = raw_source.get('hostname')
        data['target'] = raw_source.get('target')
        data['status'] = "UP" if raw_source.get('status') == "hostUp" else "DOWN"
        data['init_time'] = str(datetime.datetime.fromtimestamp(
            int(raw_source['scanstats']['time']), tz=UTC7))
        data['scan_time'] = raw_source['scanstats']['elapsed']

        data['nse'] = generateNSEOutput(raw_source['nseOutputs'])
    except:
        logging.exception(msg="No validated jsonified data to be processed!")
    return json.dumps(data)
       


def generateNSEOutput(raw_nse):
    nseOutput = {}
    try:
        for k, v in raw_nse.items():
            if v != {}:
                record = {}
                for key, value in v.items():
                    record[key] = value['output']
                nseOutput[k] = record
    except:
        logging.exception(msg="Generate NSE Output failed!")
    return nseOutput

def generateBody(q):
    if q is None:
        body = {"query": {"match_all": {}}}
    else:
        body = {"query": {"bool":{"should":[] } } }
        fields = ["hostname", "target"]
        list_query = q.split(" ")
        for i in list_query:
            if i != " ":
                q_string = {}
                q_string['query_string'] = {}
                q_string['query_string']['fields'] = fields
                q_string['query_string']['query'] = "*" + i + "*"

                body['query']['bool']['should'].append(q_string)
            else:
                continue
    return json.dumps(body)
    
def generateSortQuery(sort):
    sort_query = ""
    if sort == "init_asc":
        sort_query = "scanstats.time:asc"
    elif sort == "init_desc":
        sort_query = "scanstats.time:desc"
    return sort_query