
import logging
import datetime
import json


def process_vul(raw_vuls):
    result = []
    try:
        processing_data = raw_vuls.get('hits').get('hits')
        for vul in processing_data:
            record = vul.get('_source')
            row = {}
            row['name'] = record.get('name')
            row['target'] = record.get('target')
            row['cvss'] = record.get('level')

            if record['index'] == "Nessus":
                row['link'] = "/nessus/detail/" + record['link']
            elif record['index'] == "Nikto":
                row['link'] = "/nikto/detail?id=" + record['link']
            elif record['index'] == "Acunetix":
                row['link'] = "/acunetix/detail/" + record['link']
            elif record['index'] == "CVE-Search":
                row['link'] = "/cve/detail?id=" + record['link']
            elif record['index'] == "NSE":
                row['link'] = "/nse/detail?id=" + record['link']

            row['cvss_color'] = generate_cvss_color(record['level'])
            result.append(row)
    except:
        logging.exception(msg="No validated jsonified data to be processed!")
    return json.dumps(result)


def process_target(raw_targets):
    result = {}
    try:
        processing_data = raw_targets.get('aggregations').get('targets').get('buckets')
    except:
        logging.exception(msg="No validated jsonified data to be processed!")
    return json.dumps(processing_data)

def count_vul(raw_vul_count):
    result = {}
    try:
        processing_data = raw_vul_count.get(
            'aggregations').get('vuls').get('buckets')
        result['total'] = 0
        for record in processing_data:
            result['total'] += record.get('doc_count')
            if record.get('key') == "low":
                result['low'] = record.get('doc_count')
            elif record.get('key') == "medium":
                result['medium'] = record.get('doc_count')
            elif record.get('key') == "medium-high":
                result['mediumHigh'] = record.get('doc_count')
            elif record.get('key') == "high":
                result['high'] = record.get('doc_count')
    except:
        logging.exception(msg="No validated jsonified data to be processed!")
    return json.dumps(result)

    # Addon


def generate_cvss_color(cvss):
    if cvss == 0.0:
        return "grey"
    try:
        if cvss <= 3.9:
            return "green"
        elif cvss <= 6.9:
            return "yellow"
        elif cvss < 8.9:
            return "orange"
        else:
            return "red"
    except:
        logging.exception(msg="Invalid CVSS!")
    return "grey"
