# Import from standard library
import logging
from datetime import datetime
import math

# Import from third-party
from flask import Flask, render_template, json, request, jsonify, session

# Import local files
import DAO.db_connect as db_connect
from config.config import ElasticConfig
from modules.wappalyzer.process_wappalyzer import processWappalyzer, generateBody


def wappalyzer_overview():
    try:
        es = db_connect.connect_elasticsearch()
        try:
             # Process sort and body from arguments
            q = request.args.get('q')
            paging_size = int(request.args.get('size') or ElasticConfig.DEFAULT_PAGE_SIZE)
            paging_from = int(request.args.get('page') or 1)
            body = generateBody(q, paging_from, paging_size)

             # Process data
            rawData = es.search(index=ElasticConfig.WAPPALYZER_INDEX, body=body)
            processed_data = json.loads(processWappalyzer(rawData))
            paging_total = processed_data['total']
            paging = {
                "paging_from": paging_from,
                "paging_size": paging_size,
                "paging_total": paging_total,
                "left_page": max(paging_from - 2, 1),
                "right_page": min(max(paging_from - 2, 1) + 4, math.ceil(paging_total / paging_size))
            }
        except:
            logging.exception(msg="Fail")
    except:
        logging.exception(msg="Fail")
    session['module'] = "wappalyzer"
    session['overview'] = True
    return render_template('wappalyzer.html', response=processed_data, q=q, paging=paging)
