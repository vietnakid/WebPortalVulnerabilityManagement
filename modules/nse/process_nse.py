
import logging
import datetime
import json
import pytz


def processNSE(raw_data):
    try:
        processing_data = raw_data['hits']
        result = {}
        result['total'] = processing_data['total']['value']
        result['data'] = []
        for record in processing_data['hits']:
            result['data'].append(generateSource(record))

    except:
        logging.exception(msg="No validated jsonified data to be processed!")
    return json.dumps(result)


def generateSource(raw_data):
    data = {}
    try:
        UTC7 = pytz.timezone('Asia/Ho_Chi_Minh')
        data['id'] = raw_data['_id']
        raw_source = raw_data['_source']

        data['hostname'] = raw_source.get('hostname')
        data['target'] = raw_source.get('target')
        data['status'] = "UP" if raw_source.get(
            'status') == "hostUp" else "DOWN"
        data['init_time'] = str(datetime.datetime.fromtimestamp(
            int(raw_source['scanstat']['startTime']), tz=UTC7))
        data['scan_time'] = raw_source.get('scanstat').get('duration')
        data['scan_id'] = raw_source.get('scan_id')
        data['root_scan_id'] = raw_source.get('root_scan_id')
        data['scan_name'] = raw_source.get('scan_name')
        data['nse_script'] = len(raw_source.get('nseOutputs'))
    except:
        logging.exception(msg="Generate Source failed!")
    return data


def processNSEDetail(raw_data):
    try:
        UTC7 = pytz.timezone('Asia/Ho_Chi_Minh')
        raw_source = raw_data.get('_source')
        data = {}

        data['hostname'] = raw_source.get('hostname')
        data['target'] = raw_source.get('target')
        data['status'] = "UP" if raw_source.get(
            'status') == "hostUp" else "DOWN"
        data['init_time'] = str(datetime.datetime.fromtimestamp(
            int(raw_source['scanstat']['startTime']), tz=UTC7))
        data['scan_time'] = raw_source.get('scanstat').get('duration')
        data['scan_id'] = raw_source.get('scan_id')
        data['root_scan_id'] = raw_source.get('root_scan_id')
        data['scan_name'] = raw_source.get('scan_name')
        data['nse'] = raw_source['nseOutputs']
    except:
        logging.exception(msg="No validated jsonified data to be processed!")
    return json.dumps(data)


def generateBody(q, paging_from, paging_size):
    if q is None:
        body = {"from": (paging_from - 1) * paging_size,
                "size": paging_size,
                "query": {"match_all": {}}}
    else:
        body = {"from": (paging_from - 1) * paging_size,
                "size": paging_size,
                "query": {"bool": {"should": []}}}
        fields = ["hostname", "target"]
        list_query = q.split(" ")
        for i in list_query:
            if i != " ":
                q_string = {}
                q_string['query_string'] = {}
                q_string['query_string']['fields'] = fields
                q_string['query_string']['query'] = "*" + i + "*"

                body['query']['bool']['should'].append(q_string)
            else:
                continue
    return json.dumps(body)


def generateSortQuery(sort, index):
    sort_query = ""
    if index == '1':
        sort_query = "target.keyword" + ":" + sort
    elif index == '2':
        sort_query = "hostname.keyword" + ":" + sort
    elif index == '3':
        sort_query = "status.keyword" + ":" + sort
    elif index == '4':
        sort_query = "scanstat.startTime" + ":" + sort
    elif index == '5':
        sort_query = "scanstat.duration" + ":" + sort
    elif index == '6':
        sort_query = "scan_id.keyword" + ":" + sort
    elif index == '7':
        sort_query = "scan_name.keyword" + ":" + sort
    elif index == '8':
        sort_query = "scan_name.keyword" + ":" + sort

    return sort_query
