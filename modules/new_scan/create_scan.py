# Import from standard library
import logging, json, re
# from datetime import datetime

# Import from third-party
from flask import Flask, render_template, request

# Import local files
import DAO.db_connect as db_connect
from config.config import ElasticConfig

REGEX_IP = "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"
REGEX_IP_RANGE = "(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(3[0-2]|[1-2][0-9]|[0-9]))$"
REGEX_DOMAIN = "^(?!:\/\/)([a-zA-Z0-9-_]+\.)*[a-zA-Z0-9][a-zA-Z0-9-_]+\.[a-zA-Z]{2,11}?$"

def create_scan():
    try:
        es = db_connect.connect_elasticsearch()
        try:
            name = request.form.get('name')
            description = request.form.get('description')
            scan_type = request.form.get('scan_type')
            scan_time_epoch = int(request.form.get('scan_time_epoch'))
            created_time_epoch = int(request.form.get('created_time_epoch'))
            scan_interval = int(request.form.get('interval'))

            # Validate target
            target_raw = request.form.get('target')
            if target_raw == "":
                logging.exception(msg="Target is empty!")
                return "Fail"
            else:
                list_target = []
                if target_raw.find(" ") == -1:
                    list_target.append(target_raw)
                else:
                    list_target = target_raw.split(" ")

                for target in list_target:
                    if (re.match(REGEX_IP, target) is not None or 
                        re.match(REGEX_IP_RANGE, target) is not None or 
                        re.match(REGEX_DOMAIN, target) is not None):
                        continue
                    else:
                        logging.exception(msg="Invalid target!")
                        return "Fail"

            body = {
                'name' : name,
                'description' : description,
                'target' : target_raw,
                'next_run_at' : scan_time_epoch,
                'run_interval' : scan_interval,
                'created_date' : created_time_epoch,
                'scanned_time' : 0,
                'scan_type' : scan_type
            }
            print(json.dumps(body))
            es.index(index=ElasticConfig.SCAN_INDEX, body=body)
        except:
            logging.exception(msg="Process data from form failed!")
            return "Fail"
    except:
        logging.exception(msg="Connect database failed!")
    return "Success"
