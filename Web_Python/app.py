
import logging
from datetime import datetime
from flask import Flask, render_template, json, request, jsonify
from elasticsearch import Elasticsearch
from Config.config import ElasticConfig
from bin.process_cve import processCVE
from bin.process_cve import processCveDetail

es = Elasticsearch()
webApp = Flask(__name__)


def connect_elasticsearch():
    # Connect to cluster over SSL using auth for best security:
    es_header = [{
        'host': ElasticConfig.HOSTNAME,
        'port': 443,
        'use_ssl': True,
        'http_auth': (ElasticConfig.USERNAME, ElasticConfig.PASSWORD)
    }]
    es = Elasticsearch(es_header)
    return es


@webApp.route("/")
def main():
    return render_template('index.html')


@webApp.route("/CVE")
def cve():
    try:
        es = connect_elasticsearch()
        try:
            body = {"query": {"match_all": {}}}
            rawData = es.search(
                index=ElasticConfig.CVESEARCHINDEX, body=body, size=50)
            processed_data = json.loads(processCVE(rawData))
            return render_template('cve.html', response=processed_data, seg=1)
        except:
            logging.exception(msg="Fail")
    except:
        logging.exception(msg="Fail")


@webApp.route("/CVE/detail")
def cve_detail():
    cId = request.args.get('id')
    try:
        es = connect_elasticsearch()
        try:
            body = {"query": {"match": {
                "_id": cId}}}
            rawData = es.search(
                index=ElasticConfig.CVESEARCHINDEX, body=body,)
            processed_data = processCveDetail(rawData)
            return render_template('cve_detail.html', response=processed_data, seg=1)
        except:
            logging.exception(msg="Fail")
    except:
        logging.exception(msg="Fail")


if __name__ == "__main__":
    webApp.run(debug=True)
