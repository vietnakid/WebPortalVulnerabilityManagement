# Import from standard library
import logging
import datetime
import json

# Import from third-party
from flask import Flask, render_template, json, request, jsonify
import pytz

# Import local files
import DAO.db_connect as db_connect
from config.config import ElasticConfig

DEFAULT_SORT = "scanstat.startTime:desc"

def targets_overview():
    try:
        es = db_connect.connect_elasticsearch()
        try:
            # Process sort and body from arguments
            search_query = request.args.get('q') or ''
            _search_query = ' '.join('*'+_+'*' for _ in search_query.split(' '))
            raw_sort = request.args.get('sort')
            sort_query = DEFAULT_SORT if raw_sort is None else DEFAULT_SORT if raw_sort == 'init_desc' else "scanstat.startTime:asc"
            query_body = {
                            "_source": ["target", "hostname",  "status","target_id_id", "scan_id", "scanstat.startTime", "id"], 
                            "size": ElasticConfig.DEFAULT_PAGE_SIZE,
                            "query": {
                                "bool": {
                                    "should": [
                                    {
                                        "query_string": {
                                        "fields": ["target", "hostname", "status", "scan_id", "target_id_id"],
                                        "query": _search_query
                                        }
                                    }
                                    ]
                                }
                            }
                        }
            # Process data
            rawData = es.search(index=ElasticConfig.NMAP_INDEX, body=query_body, sort=sort_query)

            processed_data = processScan(rawData)
                
            targetIds = ''
            for data in processed_data['records']:
                targetIds += data["id"] + ' '

            summary_result = getSummaryResult(targetIds)

            for i in range(len(processed_data['records'])):
                data = processed_data['records'][i]
                processed_data['records'][i]['summary_result'] = summary_result[processed_data['records'][i]['id']]
        except:
            logging.exception(msg="Fail")
    except:
        logging.exception(msg="Fail")
    return render_template('targets.html', response=processed_data, search_query=search_query, sorting=sort_query)

def processScan(rawData):
    try:
        UTC7 = pytz.timezone('Asia/Ho_Chi_Minh')
        processing_data = rawData['hits']
        result = {}
        result['total'] = processing_data['total']
        result['records'] = []
        for hit in processing_data['hits']:
            _source = hit['_source']
            _source["id"] = hit.get('_id')
            _source['startTime'] = str(datetime.datetime.fromtimestamp(
                    int(_source.get('scanstat').get("startTime")), tz=UTC7))
            del _source['scanstat']
            result['records'].append(_source)

        return result

    except:
        logging.exception(msg="No validated jsonified data to be processed!")

def getSummaryResult(targetIds):
    result = dict()
    list_target_id = targetIds.split(' ')
    try:
        resultAcunetix = getDataFromAcunetix(targetIds)
        resultCVESearch = getDataFromCVESearch(targetIds)
        print ("resultCVESearch", resultCVESearch)
        for target_id in list_target_id:
            result[target_id] = {
                "low" : 0,
                "informational" : 0,
                "high" : 0,
                "medium" : 0
            }
            result[target_id]['informational'] += resultCVESearch.get(target_id, dict()).get('informational', 0)
            result[target_id]['low'] += resultCVESearch.get(target_id, dict()).get('low', 0)
            result[target_id]['medium'] += resultCVESearch.get(target_id, dict()).get('medium', 0)
            result[target_id]['high'] += resultCVESearch.get(target_id, dict()).get('high', 0)

            result[target_id]['informational'] += resultAcunetix.get(target_id, dict()).get('informational', 0)
            result[target_id]['low'] += resultAcunetix.get(target_id, dict()).get('low', 0)
            result[target_id]['medium'] += resultAcunetix.get(target_id, dict()).get('medium', 0)
            result[target_id]['high'] += resultAcunetix.get(target_id, dict()).get('high', 0)
    except:
        logging.exception(msg="Something went wrong!")
    return result

def getDataFromAcunetix(targetIds):
    result = dict()
    try:
        es = db_connect.connect_elasticsearch()
        query_body = {
                    "query": {
                        "bool": {
                        "should": [
                            {
                            "query_string": {
                            "fields": ["id"],
                            "query": targetIds
                            }
                            }
                        ]
                        }
                    },
                    "size": 0,
                    "aggs": {
                        "group_by_target_id": {
                        "terms": {
                            "field": "id.keyword",
                            "size": ElasticConfig.MAX_SIZE_AGGS
                        },
                        "aggs": {
                            "informational": {
                                "sum": {
                                    "field": "vuln_stats.informational"
                                }
                            },
                            "low": {
                                "sum": {
                                    "field": "vuln_stats.low"
                                }
                            },
                            "medium": {
                                "sum": {
                                    "field": "vuln_stats.medium"
                                }
                            },
                            "high": {
                                "sum": {
                                    "field": "vuln_stats.high"
                                }
                            }
                            }
                        }
                        }
                    }
        rawData = es.search(index=ElasticConfig.ACUNETIX_SUMMARY_INDEX, body=query_body)
        processing_data = rawData['aggregations']["group_by_target_id"]["buckets"]
        for data in processing_data:
            res = {
                "low" : int(data['low']['value']),
                "informational" : int(data['informational']['value']),
                "high" : int(data['high']['value']),
                "medium" : int(data['medium']['value'])
            }
            result[data.get('key')] =  res

    except:
        logging.exception(msg="Something went wrong!")
    return result

def getDataFromCVESearch(targetIds):
    result = dict()
    try:
        es = db_connect.connect_elasticsearch()
        query_body = {
                        "query": {
                            "bool": {
                            "should": [
                                {
                                "query_string": {
                                "fields": ["id"],
                                "query": targetIds
                                }
                                }
                            ]
                            }
                        },
                        "size": 0,
                        "aggs": {
                            "group_by_target_id": {
                            "terms": {
                                "field": "id.keyword",
                                "size": ElasticConfig.MAX_SIZE_AGGS
                            },
                            "aggs": {
                                "vul_stats": {
                                "range": {
                                    "field": "weakness.cvss",
                                    "ranges": [
                                    {
                                        "to": 3.9,
                                        "key": "low"
                                    },
                                    {
                                        "from": 4.0,
                                        "to": 6.9,
                                        "key": "medium"
                                    },
                                    {
                                        "from": 7.0,
                                        "key": "high"
                                    }
                                    ]
                                }
                                }
                            }
                            }
                        }
                    }
        rawData = es.search(index=ElasticConfig.CVESEARCH_INDEX, body=query_body)
        processing_data = rawData['aggregations']["group_by_target_id"]["buckets"]
        for data in processing_data:
            res = {
                "low" : 0,
                "informational" : 0,
                "high" : 0,
                "medium" : 0
            }
            buckets = data.get('vul_stats').get('buckets')
            for bucket in buckets:
                res[bucket.get('key')] += bucket.get('doc_count')
            result[data.get('key')] =  res
    except:
        logging.exception(msg="Something went wrong!")
    return result