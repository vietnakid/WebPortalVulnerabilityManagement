#!/usr/bin/python3

# Import from standard library
import logging
import os
# from datetime import datetime

# Import from third-party
from flask import Flask, render_template, json, request, jsonify, session, redirect, url_for

# Import local files

webApp = Flask(__name__)
webApp.secret_key = os.urandom(24)

# Error Handler
@webApp.errorhandler(404)
def error404(e):
    return render_template('404.html')

@webApp.errorhandler(500)
def error500(e):
    return render_template('500.html')

@webApp.route("/")
def main():
    if session.get('user') == None or session.get('verified') == False:
        return redirect(url_for('login'))
    else:
        session['module'] = None
        return render_template('index.html')

# nmap module
@webApp.route("/nmap/overview")
def nmap():
    if session.get('user') == None or session.get('verified') == False:
        return redirect(url_for('login'))
    else:
        import modules.nmap.overview as nmap
        return nmap.nmap_overview()


@webApp.route("/nmap/detail")
def nmap_detail():
    if session.get('user') == None or session.get('verified') == False:
        return redirect(url_for('login'))
    else:
        import modules.nmap.detail as nmap_detail
        return nmap_detail.nmap_detail()

# NSE module
@webApp.route("/nse/overview")
def nse():
    if session.get('user') == None or session.get('verified') == False:
        return redirect(url_for('login'))
    else:
        import modules.nse.overview as nse
        return nse.nse_overview()


@webApp.route("/nse/detail")
def nse_detail():
    if session.get('user') == None or session.get('verified') == False:
        return redirect(url_for('login'))
    else:
        import modules.nse.detail as nse_detail
        return nse_detail.nse_detail()


# CVE module
@webApp.route("/cve/overview")
def cve():
    if session.get('user') == None or session.get('verified') == False:
        return redirect(url_for('login'))
    else:
        import modules.cve_search.overview as cve
        return cve.cve_overview()


@webApp.route("/cve/detail")
def cve_detail():
    if session.get('user') == None or session.get('verified') == False:
        return redirect(url_for('login'))
    else:
        import modules.cve_search.detail as cve_detail
        return cve_detail.cve_detail()


@webApp.route("/wappalyzer/overview")
def wappalyzer():
    if session.get('user') == None or session.get('verified') == False:
        return redirect(url_for('login'))
    else:
        import modules.wappalyzer.overview as wappalyzer
        return wappalyzer.wappalyzer_overview()


@webApp.route("/wappalyzer/detail")
def wappalyzer_detail():
    if session.get('user') == None or session.get('verified') == False:
        return redirect(url_for('login'))
    else:
        import modules.wappalyzer.detail as wappalyzer_detail
        return wappalyzer_detail.wappalyzer_detail()


# Acunetix module
@webApp.route("/acunetix/overview")
def acu():
    if session.get('user') == None or session.get('verified') == False:
        return redirect(url_for('login'))
    else:
        import modules.acunetix.overview as acu
        return acu.acu_overview()


@webApp.route("/acunetix/detail/<id>")
def acu_detail(id):
    if session.get('user') == None or session.get('verified') == False:
        return redirect(url_for('login'))
    else:
        import modules.acunetix.detail as acu_detail
        return acu_detail.acu_detail(id)


@webApp.route("/acunetix/detail/<id>/<vulId>")
def acu_detail_row(id, vulId):
    if session.get('user') == None or session.get('verified') == False:
        return redirect(url_for('login'))
    else:
        import modules.acunetix.detail as acu_detail
        return acu_detail.acu_detail_row(id, vulId)

# Nessus module
@webApp.route("/nessus/overview")
def nessus():
    if session.get('user') == None or session.get('verified') == False:
        return redirect(url_for('login'))
    else:
        import modules.nessus.overview as nessus
        return nessus.nessus_overview()

@webApp.route("/nessus/detail/<id>")
def nessus_detail(id):
    if session.get('user') == None or session.get('verified') == False:
        return redirect(url_for('login'))
    else:
        import modules.nessus.detail as nessus_detail
        return nessus_detail.nessus_detail(id)

# Nikto module
@webApp.route("/nikto/overview")
def nikto():
    if session.get('user') == None or session.get('verified') == False:
        return redirect(url_for('login'))
    else:
        import modules.nikto.overview as nikto
        return nikto.nikto_overview()
        

@webApp.route("/nikto/detail")
def nikto_detail():
    if session.get('user') == None or session.get('verified') == False:
        return redirect(url_for('login'))
    else:
        import modules.nikto.detail as nikto_detail
        return nikto_detail.nikto_detail()

# Scan module

@webApp.route("/scan/overview")
def scan_overview():
    if session.get('user') == None or session.get('verified') == False:
        return redirect(url_for('login'))
    else:
        import modules.scan.overview as scan
        return scan.scan_overview()

@webApp.route("/scan/detail/<id>")
def scan_detail(id):
    if session.get('user') == None or session.get('verified') == False:
        return redirect(url_for('login'))
    else:
        import modules.scan.detail as scan_detail
        return scan_detail.scan_detail(id)

# Target module

@webApp.route("/targets/overview")
def targets_overview():
    if session.get('user') == None or session.get('verified') == False:
        return redirect(url_for('login'))
    else:
        import modules.targets.overview as targets
        return targets.targets_overview()

@webApp.route("/targets/detail/<id>")
def targets_detail(id):
    if session.get('user') == None or session.get('verified') == False:
        return redirect(url_for('login'))
    else:
        import modules.targets.detail as target_Detail
        return target_Detail.target_detail(id)

# New scan module
@webApp.route("/newscan/new")
def news_scan():
    if session.get('user') == None or session.get('verified') == False:
        return redirect(url_for('login'))
    else:
        import modules.new_scan.new_scan as new_scan
        return new_scan.new_scan()

@webApp.route("/newscan/create", methods=['POST'])
def create_scan():
    if session.get('user') == None or session.get('verified') == False:
        return redirect(url_for('login'))
    else:
        import modules.new_scan.create_scan as create_scan
        return create_scan.create_scan()

# Vulnerability module
@webApp.route("/vulnerability/overview")
def vulnerability_overview():
    if session.get('user') == None or session.get('verified') == False:
        return redirect(url_for('login'))
    else:
        import modules.vulnerability.overview as vulnerability
        return vulnerability.vulnerability_overview()

# Authentication
@webApp.route("/login")
def login():
    if session.get('user') != None and session.get('verified') != False:
        return redirect(url_for('main'))
    else:
        return render_template('login.html')

@webApp.route("/logout")
def logout():
    session.clear()
    return redirect(url_for('login'))

@webApp.route("/login", methods=['POST'])
def authen():
    import authentication.authen as authen
    return authen.check_login()

@webApp.route("/twofactor")
def twofactor():
    if session.get('user') == None:
        return redirect(url_for('login'))
    elif session['user']['firstlogin'] != True:
        return redirect(url_for('main'))
    else:
        import authentication.totp as totp
        return totp.two_factor_setup()

@webApp.route("/qrcode")
def qrcode():
    if session.get('user') == None:
        return redirect(url_for('login'))
    elif session['user']['firstlogin'] != True:
        return redirect(url_for('main'))
    else:
        import authentication.totp as totp
        return totp.qrcode()

@webApp.route("/verify-token", methods=['GET', 'POST'])
def verify_token():
    if session.get('user') == None:
            return redirect(url_for('login'))
    if request.method == 'GET':
        if session['user']['firstlogin'] == True:
            return redirect(url_for('twofactor'))
        elif session.get('verified') != None and session['verified'] == True:
            return redirect(url_for('main'))
        else:
            return render_template('verify-token.html')
    else:
        import authentication.totp as totp
        return totp.verify_totp()
    
if __name__ == "__main__":
    # webApp.run()
    webApp.run(debug=True)
