
import logging
import datetime
import json


def processNSE(raw_data):
    try:
        processing_data = raw_data['hits']
        result = {}
        result['total'] = processing_data.get('total')
        for hit in processing_data['hits']:
            result['source'] = generateSource(hit['_source'])
    except:
        logging.exception(msg="No validated jsonified data to be processed!")
    return json.dumps(result)


def generateSource(raw_source):
    source = {}
    try:
        source['hostname'] = raw_source.get('hostname')
        source['target'] = raw_source.get('target')
        source['status'] = "UP" if raw_source.get('status') == "hostUp" else "DOWN"
        source['init_time'] = str(datetime.datetime.utcfromtimestamp(
            int(raw_source['scanstats']['time'])).replace(tzinfo=datetime.timezone.utc))
        source['scan_time'] = raw_source['scanstats']['elapsed']
        source['nse'] = generateNSEOutput(raw_source['nseOutputs'])
    except:
        logging.exception(msg="Generate Source failed!")
    return source


def generateNSEOutput(raw_nse):
    nseOutput = {}
    try:
        for k, v in raw_nse.items():
            record = {}
            for key, value in v.items():
                record[key] = value['output']
            nseOutput[k] = record
    except:
        logging.exception(msg="Generate NSE Output failed!")
    return nseOutput
