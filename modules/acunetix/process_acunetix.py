
import logging
import datetime
import json
import pytz

def processAcunetix(rawData):
    result = {}
    try:
        processing_data = rawData['hits']
        result['total'] = processing_data['total']
        result['records'] = []
        for hit in processing_data['hits']:
            result['records'].append(generateSource(hit['_source'], hit.get('_id')))
    except:
        logging.exception(msg="No validated jsonified data to be processed!")
    return json.dumps(result)

def generateSource(raw_source, id):
    source = {}
    try:
        UTC7 = pytz.timezone('Asia/Ho_Chi_Minh')
        source['id'] = id
        source['target'] = raw_source.get('target')
        source['hostname'] = raw_source.get('hostname')
        source['init_time'] = str(datetime.datetime.fromtimestamp(
                int(raw_source['scan_stat']['startTime']), tz=UTC7))
        source['scan_time'] = raw_source.get('scan_stat').get('endTime') - raw_source.get('scan_stat').get('startTime')
    except:
        logging.exception(msg="Generate Source failed!")
    return source

def processAcunetixDetail(rawData):
    result = {}
    try:
        result['source'] = generateSource(rawData.get('_source'), id=rawData.get('_id'))
        result['scan_details'] = []
        for row in rawData.get('_source').get('scan_details'):
            result['scan_details'].append(generateScanDetail(row))
    except:
        logging.exception(msg="No validated jsonified data to be processed!")
    return json.dumps(result)

def generateScanDetail(raw_detail):
    scan_detail = {}
    try:
        scan_detail['vul_id'] = raw_detail.get('vuln_id')
        scan_detail['vul_name'] = raw_detail.get('vt_name')
        scan_detail['affects_url'] = raw_detail.get('affects_url')
        scan_detail['affects_detail'] = raw_detail.get('affects_detail')
        scan_detail['status'] = raw_detail.get('status')
        scan_detail['cvss_score'] = raw_detail.get('cvss_score')
    except:
        logging.exception(msg="No validated jsonified data to be processed!")
    return scan_detail

def generateBody(q):
    if q is None:
        body = {"query": {"match_all": {}}}
    else:
        body = {"query": {"bool":{"should":[] } } }
        fields = ["hostname", "target"]
        list_query = q.split(" ")
        for i in list_query:
            if i != " ":
                q_string = {}
                q_string['query_string'] = {}
                q_string['query_string']['fields'] = fields
                q_string['query_string']['query'] = "*" + i + "*"

                body['query']['bool']['should'].append(q_string)
            else:
                continue
    return json.dumps(body)

def generateSortQuery(sort):
    sort_query = ""
    if sort == "init_asc":
        sort_query = "scan_stat.startTime:asc"
    elif sort == "init_desc":
        sort_query = "scan_stat.startTime:desc"
    return sort_query