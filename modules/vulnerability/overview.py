# Import from standard library
import logging
import datetime
import json

# Import from third-party
from flask import Flask, render_template, json, request, jsonify, session
import pytz

# Import local files
import DAO.db_connect as db_connect
from config.config import ElasticConfig
from modules.vulnerability.process_vulnerability import process_vulnerability, generateBody, generateSortQuery

DEFAULT_SORT = "scanstat.startTime:desc"

def vulnerability_overview():
    try:
        es = db_connect.connect_elasticsearch()
        try:
            session['module'] = "vulnerability"
            # Process sort and body from arguments
            q = request.args.get('q')
            raw_sort = request.args.get('sort')
            sort_query = DEFAULT_SORT if raw_sort is None else generateSortQuery(raw_sort)
            body = generateBody(q)

             # Process data
            rawData = es.search(
                index=[ElasticConfig.NESSUS_INDEX, ElasticConfig.NIKTO_INDEX, ElasticConfig.ACUNETIX_SUMMARY_INDEX, ElasticConfig.CVESEARCH_INDEX]
                , body=body, size=ElasticConfig.DEFAULT_PAGE_SIZE, sort=sort_query)

            processed_data = json.loads(process_vulnerability(rawData))
            # print(processed_data)
        except:
            logging.exception(msg="Fail!")
    except:
        logging.exception(msg="Fail")
    pass
    return render_template('vulnerability.html', response=processed_data, q=q, sorting=sort_query)