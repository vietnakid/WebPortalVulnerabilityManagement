import logging
from datetime import datetime

from flask import Flask, render_template, request

from DAL import user_dal
import math
import re
import pytz

def manage_user():
    try:
        action = request.form['action']
        if not action:
            return list_user()
        if action == 'delete':
            return delete_user()
        elif action == 'enable':
            return enable_user()
        elif action == 'disable':
            return disable_user()
        elif action == 'otp':
            return first_login()
    except:
        logging.exception(msg="Fail")

def list_user(msg=""):
    try:
        paging_size = 10
        paging_from = int(request.args.get('page') or 1)
        raw_data = user_dal.get_list_user(paging_size, paging_from)
        processed_data = processUserData(raw_data)
        if processed_data['total'] != 0:
            paging_total = processed_data['total']
            paging = {
                "paging_from": paging_from,
                "paging_size": paging_size,
                "paging_total": paging_total,
                "left_page": max(paging_from - 2, 1),
                "right_page": min(max(paging_from - 2, 1) + 4, math.ceil(paging_total / paging_size))
            }
            all_user = processed_data['users']
            return render_template('manage-user.html', records=all_user, paging=paging, msg=msg)
        else:
            return render_template('manage-user.html', msg='No user found')
    except:
        logging.exception(msg="Fail")

def add_user():
    try:
        username = request.form['username']
        password = request.form['password']
        fullname = request.form['fullname']
        role = request.form['role']
        _role = -1
        try:
            _role = int(role)
        except:
            pass
        if not validate_username(username):
            return render_template('new-user.html', create_result="Username must longer than 3 character and not contain space")
        elif not validate_password(password):
            check_list = """
Passwords will contain at least 1 upper case letter
Passwords will contain at least 1 lower case letter
Passwords will contain at least 1 number or special character
Passwords will contain at least 8 characters in length"""
            return render_template('new-user.html', create_result="Password is not validated" + check_list)
        elif fullname == "":
            return render_template('new-user.html', create_result="Full name can't be blank")
        elif _role != 0 and _role != 1:
            return render_template('new-user.html', create_result="This role does not exist")

        if not user_dal.check_username_exist(username):
            result = user_dal.add_user(username, password, fullname, _role)
            if result:
                return render_template('new-user.html', create_result="Added user Successful")
            return render_template('new-user.html', create_result="Failed to add user")
        else:
            return render_template('new-user.html', create_result="This username already exist, try again")
    except:
        logging.exception(msg="Fail")

def delete_user():
    try:
        userid = request.form['id']
        result = user_dal.delete_user(userid)
        if result:
            return list_user("Delete user successful")
        return list_user("Failed to delete user")
    except:
        logging.exception(msg="Fail")

def enable_user():
    try:
        userid = request.form['id']
        result = user_dal.enable_user(userid)
        if result:
            return list_user("Unlock user successful")
        return list_user("Failed to unlock user")
    except:
        logging.exception(msg="Fail")

def disable_user():
    try:
        userid = request.form['id']
        result = user_dal.disable_user(userid)
        if result:
            return list_user("Lock user successful")
        return list_user("Failed to lock user")
    except:
        logging.exception(msg="Fail")

#Change status firstlogin
def first_login():
    try:
        userid = request.form['id']
        result = user_dal.change_status_first_login(userid, True)
        if result:
            return list_user("Re-create OTP successful")
        return list_user("Failed to re-create OTP")
    except:
        logging.exception(msg="Fail")

def update_user_by_admin():
    try:
        userid = request.form['id']
        new_password = request.form['password']
        fullname = request.form['fullname']
        role = request.form['role']
        _role = -1
        try:
            _role = int(role)
        except:
            pass
        if new_password and not validate_password(new_password):
            user = user_dal.get_user_by_id(userid)
            return render_template('update-user-by-admin.html', result="Password is not validated", user=user)
        elif not user_dal.get_user_by_id(userid):
            user = user_dal.get_user_by_id(userid)
            return render_template('update-user-by-admin.html', result="This ID not exists", user=user)
        elif fullname == "":
            user = user_dal.get_user_by_id(userid)
            return render_template('update-user-by-admin.html', result="Full name can't be blank", user=user)
        elif _role != 0 and _role != 1:
            user = user_dal.get_user_by_id(userid)
            return render_template('update-user-by-admin.html', result="This role does not exist", user=user)
        result = user_dal.update_user_by_admin(userid, new_password, fullname, _role)
        user = user_dal.get_user_by_id(userid)
        if result:
            return render_template('update-user-by-admin.html', result="Update user successful", user=user)
        return render_template('update-user-by-admin.html', result="Failed to update user successful", user=user)
    except:
        logging.exception(msg="Fail")

def processUserData(rawData):
    result = {}
    result['users'] = []
    try:
        processing_data = rawData['hits']
        result['total'] = processing_data['total']
        if result['total'] != 0:
            UTC7 = pytz.timezone('Asia/Ho_Chi_Minh')
            for hit in processing_data['hits']:
                _source = hit['_source']
                _source['created_date'] = str(datetime.fromtimestamp(int(_source['timestamp_created']), tz=UTC7))
                _source["id"] = hit.get('_id')
                result['users'].append(_source)
    except:
        logging.exception(msg="No validated jsonified data to be processed!")
    return result

def validate_username(username):
    if " " in username or len(username) < 4:
        return False
    return True

def validate_password(password):
    regex = "(?=^.{8,}$)((?=.*\d)|(?=.*\W+))(?![.\n])(?=.*[A-Z])(?=.*[a-z]).*$"
    if re.match(regex, password):
        return True
    return False