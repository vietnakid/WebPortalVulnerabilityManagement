# Import from standard library
import logging
from datetime import datetime

# Import from third-party
from flask import Flask, render_template, json, request, jsonify, render_template_string
from jinja2 import Environment, BaseLoader

# Import local files
import DAO.db_connect as db_connect
from config.config import ElasticConfig
from modules.acunetix.process_acunetix import processAcunetix, processAcunetixDetail, processDetailVulnerability

def acu_detail(id):
    if id is None:
        return render_template('acu-detail.html')
    else:
        try:
            es = db_connect.connect_elasticsearch()
            try:
                raw_data = es.get(index=ElasticConfig.ACUNETIX_SUMMARY_INDEX,
                                  doc_type="_doc", id=id)   
                # print(raw_data)
                processed_data = json.loads(processAcunetixDetail(raw_data))
                return render_template('acu-detail.html', response=processed_data)
            except:
                logging.exception(msg="Fail")
        except:
            logging.exception(msg="Fail")


def acu_detail_row(id, vul_id):
    if id is None or vul_id is None:
        return render_template('acu-detail-vul.html')
    else:
        try:
            es = db_connect.connect_elasticsearch()
            try:
                raw_data = es.get(index=ElasticConfig.ACUNETIX_DETAIL_INDEX,
                                  doc_type="_doc", id=vul_id)
                processed_data = json.loads(processDetailVulnerability(raw_data, vul_id=vul_id))
                # detail_template = Environment(loader=BaseLoader).from_string(processed_data.get('detailed_info'))
                attack = render_template_string(processed_data.get('attack_detail'))
                return render_template('acu-detail-vul.html', response=processed_data, attack=attack)
            except:
                logging.exception(msg="Fail")
        except:
            logging.exception(msg="Fail")