import logging

from flask import Flask, render_template, request, session
import DAO.db_connect as db_connect
from config.config import ElasticConfig
from hash_function import hash_pass

import re

def get_user_data(result=""):
    from . import admin_function as adm_fnc
    userid = session['userid']
    user = adm_fnc.get_user_by_id(userid)
    return render_template('profile.html', user=user, result=result)

def update_user():
    userid = session['userid']
    fullname = request.form['fullname']
    
    if fullname == "":
        return get_user_data(result="Full name can't be blank")
    try:
        es = db_connect.connect_elasticsearch()
        try:
            script = "ctx._source.fullname = '{}'".format(fullname)
            body = {
                "script": script
            }
            es.update(index=ElasticConfig.USERS_INDEX, body=body, id=userid)
            return get_user_data(result="Update successful")
        except:
            logging.exception(msg="Fail")
    except:
        logging.exception(msg="Fail")

def check_current_password(password):
    try:
        userid = session['userid']
        es = db_connect.connect_elasticsearch()
        try:
            raw_data = es.get(index=ElasticConfig.USERS_INDEX, id=userid)
            hashed_pass = hash_pass.make_hash(password)
            if raw_data['found'] and raw_data['_source']['password'] == hashed_pass:
                return True
            else:
                return False
        except:
            logging.exception(msg="Fail")
    except:
        logging.exception(msg="Fail")

def check_two_password(new_password, re_new_password):
    if new_password == re_new_password:
        return True
    return False

def change_password():
    userid = session['userid']
    current_password = request.form['current_password']
    new_password = request.form['new_password']
    re_new_password = request.form['re_new_password']
    
    if not check_current_password(current_password):
        return render_template('change-password.html', result="Current password is not correct")
    elif not check_two_password(new_password, re_new_password):
        return render_template('change-password.html', result="Re-enter password not match")
    elif not validate_password(new_password):
        return render_template('change-password.html', result="Password is not validated")

    try:
        es = db_connect.connect_elasticsearch()
        try:
            script = "ctx._source.password = '{}'".format(hash_pass.make_hash(new_password))
            body = {
                "script": script
            }
            es.update(index=ElasticConfig.USERS_INDEX, body=body, id=userid)
            return get_user_data(result="Change password succesful")
        except:
            logging.exception(msg="Fail")
    except:
        logging.exception(msg="Fail")

def validate_password(password):
    regex = "(?=^.{8,}$)((?=.*\d)|(?=.*\W+))(?![.\n])(?=.*[A-Z])(?=.*[a-z]).*$"
    if re.match(regex, password):
        return True
    return False