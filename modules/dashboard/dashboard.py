# Import from standard library
import logging
from datetime import datetime
import math

# Import from third-party
from flask import Flask, render_template, json, request, jsonify, session

# Import local files
import DAO.db_connect as db_connect
from config.config import ElasticConfig
from modules.dashboard.query_body import DashboardQueryBody
from modules.dashboard.process_dashboard import process_vul, process_target, count_vul, process_vul_timeline


def dashboard():
    vul_count=[]
    vul_critical=[]
    vul_recent=[]
    target_vul_count=[]
    target_vul_critical=[]
    json_vul_timeline=[]
    try:
        es = db_connect.connect_elasticsearch()
        try:
            session['auto_refresh'] = ElasticConfig.DEFAULT_REFRESH_DASHBOARD_TIME
            # Get auto refresh time if any
            if request.method == 'POST':
                session['auto_refresh'] = request.form.get('auto-refresh-time') if request.form.get('auto-refresh-time') is not None else ElasticConfig.DEFAULT_REFRESH_DASHBOARD_TIME

            # Get vulnerabilities
            raw_vul_count = es.search(index=ElasticConfig.VULNERABILITY_INDEX, body=DashboardQueryBody.VUL_COUNT)
            raw_vul_critical = es.search(index=ElasticConfig.VULNERABILITY_INDEX, body=DashboardQueryBody.VUL_TOP_CRITICAL)
            raw_vul_recent = es.search(index=ElasticConfig.VULNERABILITY_INDEX, body=DashboardQueryBody.VUL_TOP_RECENT)
            raw_vul_timeline = es.search(index=ElasticConfig.VULNERABILITY_INDEX, body=DashboardQueryBody.VUL_TIMELINE)

            # Get targets
            raw_target_vul_count = es.search(index=ElasticConfig.VULNERABILITY_INDEX, body=DashboardQueryBody.TARGET_VUL_COUNT)
            raw_target_critical_count = es.search(index=ElasticConfig.VULNERABILITY_INDEX, body=DashboardQueryBody.TARGET_CRITICAL_COUNT)

            # Process
            vul_count = json.loads(count_vul(raw_vul_count))
            vul_critical = json.loads(process_vul(raw_vul_critical))
            vul_recent = json.loads(process_vul(raw_vul_recent))

            json_vul_timeline = process_vul_timeline(raw_vul_timeline)

            target_vul_count = json.loads(process_target(raw_target_vul_count))
            target_vul_critical = json.loads(process_target(raw_target_critical_count))

        except:
            logging.exception(msg="Fail")
    except:
        logging.exception(msg="Fail")
    session['module'] = "dashboard"
    return render_template('dashboard.html', vul_count=vul_count, vul_critical=vul_critical, vul_recent=vul_recent, 
                            target_vul_count=target_vul_count, target_vul_critical=target_vul_critical, json_vul_timeline=json_vul_timeline)
