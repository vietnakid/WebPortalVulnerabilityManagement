# Import from standard library
import logging
from datetime import datetime
import math

# Import from third-party
from flask import Flask, render_template, json, request, jsonify, session

# Import local files
import DAO.db_connect as db_connect
from config.config import ElasticConfig
from modules.acunetix.process_acunetix import processAcunetix, processAcunetixDetail, generateBody, generateSortQuery


def acu_overview():
    try:
        es = db_connect.connect_elasticsearch()
        try:
            # Process sort and body from arguments
            q = request.args.get('q')
            paging_from = int(request.args.get('page') or 1)
            paging_size = ElasticConfig.DEFAULT_PAGE_SIZE
            if 'size' in request.args:
                paging_size = int(request.args.get('size'))
                session['paging_size'] = paging_size
            elif 'paging_size' in session:
                paging_size = session['paging_size']
            sort = request.args.get('sort')
            index = request.args.get('index')
            if index is None:
                index = "scanstat.startTime"
            if sort is None:
                sort = "desc"
            sort_query = generateSortQuery(sort, index)
            body = generateBody(q, paging_from, paging_size)

            # Process data
            rawData = es.search(
                index=ElasticConfig.ACUNETIX_SUMMARY_INDEX, body=body, sort=sort_query)
            processed_data = json.loads(processAcunetix(rawData))
            paging_total = processed_data['total']
            paging = {
                "paging_from": paging_from,
                "paging_size": paging_size,
                "paging_total": paging_total,
                "left_page": max(paging_from - 2, 1),
                "right_page": min(max(paging_from - 2, 1) + 4, math.ceil(paging_total / paging_size))
            }
            if sort == "desc":
                sort = "asc"
            else:
                sort = "desc"
        except:
            logging.exception(msg="Fail")
    except:
        logging.exception(msg="Fail")

    session['module'] = "acunetix"
    session['overview'] = True
    return render_template('acunetix.html', response=processed_data, q=q, sorting=sort, index=index, paging=paging)
