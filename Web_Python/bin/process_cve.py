
import logging
import datetime
import json


def processCVE(rawData):
    try:
        processing_data = rawData['hits']
        result = {}
        result['total'] = processing_data['total']
        result['records'] = []
        for hit in processing_data['hits']:
            result['records'].append(generateSource(
                hit['_source'], hit.get('_id')))

        return json.dumps(result)

    except:
        logging.exception(msg="No validated jsonified data to be processed!")


def generateSource(raw_source, id):
    source = {}
    source['id'] = id
    source['target'] = raw_source.get('target')
    source['hostname'] = raw_source.get('hostname')
    source['startTime'] = str(datetime.datetime.utcfromtimestamp(
        int(raw_source['startTime'])).replace(tzinfo=datetime.timezone.utc))
    source['endTime'] = str(datetime.datetime.utcfromtimestamp(
        int(raw_source['endTime'])).replace(tzinfo=datetime.timezone.utc))

    # count cvss
    high = 0
    medium = 0
    low = 0
    if raw_source['weakness'] is not None:
        for cpes in raw_source['weakness']:
            for cpe in raw_source['weakness'][cpes]:
                if float(cpe['cvss']) <= 4:
                    low += 1
                elif float(cpe['cvss']) <= 7:
                    medium += 1
                else:
                    high += 1

    source['high'] = high
    source['medium'] = str(medium)
    source['low'] = str(low)
    return source


def processCveDetail(rawData):
    try:
        processing_data = rawData['hits']['hits'][0]['_source']
        result = {}
        result['target'] = processing_data['target']
        result['hostname'] = processing_data.get('hostname')
        result['startTime'] = str(datetime.datetime.utcfromtimestamp(
            int(processing_data['startTime'])).replace(tzinfo=datetime.timezone.utc))
        result['endTime'] = str(datetime.datetime.utcfromtimestamp(
            int(processing_data['endTime'])).replace(tzinfo=datetime.timezone.utc))

        result['weakness'] = processing_data['weakness']
        if raw_source['weakness'] is not None:
            for cpe in processing_data['weakness']:
                print(len(processing_data['weakness']))
                result['weakness']['size'] = len(processing_data['weakness'])
        return result

    except:
        logging.exception(msg="No validated jsonified data to be processed!")
    return result
