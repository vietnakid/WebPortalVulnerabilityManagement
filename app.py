# Import from standard library
import logging
import os
# from datetime import datetime

# Import from third-party
from flask import Flask, render_template, json, request, jsonify, session

# Import local files

webApp = Flask(__name__)
webApp.secret_key = os.urandom(24)

# Error Handler
@webApp.errorhandler(404)
def error404(e):
    return render_template('404.html')

@webApp.errorhandler(500)
def error500(e):
    return render_template('500.html')

@webApp.route("/")
def main():
    session['module'] = None
    return render_template('index.html')

# nmap module
@webApp.route("/nmap/overview")
def nmap():
    import modules.nmap.overview as nmap
    return nmap.nmap_overview()


@webApp.route("/nmap/detail")
def nmap_detail():
    import modules.nmap.detail as nmap_detail
    return nmap_detail.nmap_detail()

# NSE module
@webApp.route("/nse/overview")
def nse():
    import modules.nse.overview as nse
    return nse.nse_overview()


@webApp.route("/nse/detail")
def nse_detail():
    import modules.nse.detail as nse_detail
    return nse_detail.nse_detail()


# CVE module
@webApp.route("/cve/overview")
def cve():
    import modules.cve_search.overview as cve
    return cve.cve_overview()


@webApp.route("/cve/detail")
def cve_detail():
    import modules.cve_search.detail as cve_detail
    return cve_detail.cve_detail()


@webApp.route("/wappalyzer/overview")
def wappalyzer():
    import modules.wappalyzer.overview as wappalyzer
    return wappalyzer.wappalyzer_overview()


@webApp.route("/wappalyzer/detail")
def wappalyzer_detail():
    import modules.wappalyzer.detail as wappalyzer_detail
    return wappalyzer_detail.wappalyzer_detail()


# Acunetix module
@webApp.route("/acunetix/overview")
def acu():
    import modules.acunetix.overview as acu
    return acu.acu_overview()


@webApp.route("/acunetix/detail/<id>")
def acu_detail(id):
    import modules.acunetix.detail as acu_detail
    return acu_detail.acu_detail(id)


@webApp.route("/acunetix/detail/<id>/<vulId>")
def acu_detail_row(id, vulId):
    import modules.acunetix.detail as acu_detail
    return acu_detail.acu_detail_row(id, vulId)

# Nessus module
@webApp.route("/nessus/overview")
def nessus():
    import modules.nessus.overview as nessus
    return nessus.nessus_overview()

@webApp.route("/nessus/detail/<id>")
def nessus_detail(id):
    import modules.nessus.detail as nessus_detail
    return nessus_detail.nessus_detail(id)

# Nikto module
@webApp.route("/nikto/overview")
def nikto():
    import modules.nikto.overview as nikto
    return nikto.nikto_overview()
        

@webApp.route("/nikto/detail")
def nikto_detail():
    import modules.nikto.detail as nikto_detail
    return nikto_detail.nikto_detail()

# Scan module

@webApp.route("/scan/overview")
def scan_overview():
    import modules.scan.overview as scan
    return scan.scan_overview()

@webApp.route("/scan/detail/<id>")
def scan_detail(id):
    import modules.scan.detail as scan_detail
    return scan_detail.scan_detail(id)

# Target module

@webApp.route("/targets/overview")
def targets_overview():
    import modules.targets.overview as targets
    return targets.targets_overview()

@webApp.route("/targets/detail/<id>")
def targets_detail(id):
    import modules.targets.detail as target_Detail
    return target_Detail.target_detail(id)

# New scan module
@webApp.route("/newscan/new")
def news_scan():
    import modules.new_scan.new_scan as new_scan
    return new_scan.new_scan()

@webApp.route("/newscan/create", methods=['POST'])
def create_scan():
    import modules.new_scan.create_scan as create_scan
    return create_scan.create_scan()

# Vulnerability module
@webApp.route("/vulnerability/overview")
def vulnerability_overview():
    import modules.vulnerability.overview as vulnerability
    return vulnerability.vulnerability_overview()

    
if __name__ == "__main__":
    # webApp.run()
    webApp.run(debug=True)
