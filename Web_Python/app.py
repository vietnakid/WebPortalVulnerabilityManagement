
import logging
from datetime import datetime
from flask import Flask, render_template, json, request, jsonify
from elasticsearch import Elasticsearch
from Config.config import ElasticConfig
from bin.process_nmap import processNmap, processNmapDetail
from bin.process_nse import processNSE

es = Elasticsearch()
webApp = Flask(__name__)


def connect_elasticsearch():
    # Connect to cluster over SSL using auth for best security:
    es_header = [{
        'host': ElasticConfig.HOSTNAME,
        'port': 443,
        'use_ssl': True,
        'http_auth': (ElasticConfig.USERNAME, ElasticConfig.PASSWORD)
    }]
    es = Elasticsearch(es_header)
    return es


@webApp.route("/")
def main():
    return render_template('index.html')


# @webApp.route('/new-scan', methods=['POST'])
# def newScan():
#     scanName = request.form['scanName']
#     scanDescription = request.form['scanDescription']
#     stringTools = request.form['stringTools']
#     scanTarget = request.form['scanTarget']

#     print(scanName, "-", scanDescription, "-",
#           stringTools, "-", scanTarget)

#     return render_template('newscan.html')

@webApp.route("/demoElasticNmap")
def nmap():
    try:
        es = connect_elasticsearch()
        try:
            body = {"query": {"match_all": {}}}
            rawData = es.search(
                index=ElasticConfig.NMAPINDEX, body=body, size=50)
            processed_data = json.loads(processNmap(rawData))
            return render_template('nmap.html', response=processed_data)
        except:
            logging.exception(msg="Fail")
    except:
        logging.exception(msg="Fail")


@webApp.route("/demoElasticNmap/detail")
def nmap_detail():
    id = request.args.get('id')
    if id is None:
        return render_template('nmap-detail.html')
    else:
        try:
            es = connect_elasticsearch()
            try:
                raw_data = es.get(index=ElasticConfig.NMAPINDEX,
                                  doc_type="_doc", id=id)
                processed_data = json.loads(processNmapDetail(raw_data))
                return render_template('nmap-detail.html', response=processed_data)
            except:
                logging.exception(msg="Fail")
        except:
            logging.exception(msg="Fail")


@webApp.route("/demoElasticNSE")
def nse():
    try:
        es = connect_elasticsearch()
        try:
            body = {"query": {"match_all": {}}}
            rawData = es.search(
                index=ElasticConfig.NSEINDEX, body=body, size=50)
            processed_data = json.loads(processNSE(rawData))
        except:
            logging.exception(msg="Fail")
    except:
        logging.exception(msg="Fail")
    return render_template('nse.html', response=processed_data)


if __name__ == "__main__":
    webApp.run(debug=True)
